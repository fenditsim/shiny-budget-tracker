[{"name":"app.R","content":"# app.R - Main entry point for Shiny app\n\n# Load required libraries first\nlibrary(shiny)\nlibrary(DBI)\nlibrary(RSQLite)\nlibrary(shinyjs)\nlibrary(shinyalert)\nlibrary(writexl)\nlibrary(echarts4r)\n\n# Source all component files (environment = .GlobalEnv ensures functions are available globally)\nsource(\"helpers.R\", local = FALSE)\nsource(\"db.R\", local = FALSE)\nsource(\"ui.R\", local = FALSE)\nsource(\"server.R\", local = FALSE)\n\n# Create a function that ensures the database is closed when the app stops\nonStop(function() {\n  if (exists(\"con\") && dbIsValid(con)) {\n    dbDisconnect(con)\n    cat(\"Database connection closed.\\n\")\n  }\n})\n\n# Run the application\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"server.R","content":"# server.R - Server logic for the Budget Tracker app\n\nserver <- function(input, output, session) {\n  # Initialize database connection inside server function\n  con <- setup_db()\n  \n  # Create a reactive value to store the parsed data for importing\n  parsed_text_data <- reactiveVal(NULL)\n  \n  # Modify the preview_text_data_btn observer to store the parsed data\n  # Replace the entire preview_text_data_btn observer with this version:\n  \n  # Preview text data button handler\n  observeEvent(input$preview_text_data_btn, {\n    # Get the text area content\n    text_data <- input$expense_text_data\n    \n    # Check if text is empty\n    if (is.null(text_data) || text_data == \"\") {\n      output$text_preview_ui <- renderUI({\n        div(\n          class = \"alert alert-warning\",\n          \"Please enter some data in the text area.\"\n        )\n      })\n      shinyjs::hide(\"import_text_button_container\")\n      parsed_text_data(NULL)  # Clear any previously stored data\n      return()\n    }\n    \n    # Try to parse the text as CSV\n    tryCatch({\n      # Split the text into lines\n      lines <- strsplit(text_data, \"\\\\r?\\\\n\")[[1]]\n      lines <- lines[lines != \"\"] # Remove empty lines\n      \n      if (length(lines) == 0) {\n        output$text_preview_ui <- renderUI({\n          div(\n            class = \"alert alert-warning\",\n            \"No data found. Please enter data in CSV format.\"\n          )\n        })\n        shinyjs::hide(\"import_text_button_container\")\n        parsed_text_data(NULL)  # Clear any previously stored data\n        return()\n      }\n      \n      # Print lines for debugging\n      cat(\"Lines to parse:\\n\")\n      for (i in 1:length(lines)) {\n        cat(i, \":\", lines[i], \"\\n\")\n      }\n      \n      # Check if the header row exists and add it if not\n      if (!grepl(\"date\", tolower(lines[1]))) {\n        # Add header row\n        lines <- c(\"date,item_name,amount,category\", lines)\n        cat(\"Added header row\\n\")\n      }\n      \n      # Combine lines back to text\n      csv_text <- paste(lines, collapse = \"\\n\")\n      \n      # Parse the CSV text\n      con <- textConnection(csv_text)\n      df <- read.csv(con, stringsAsFactors = FALSE, \n                     header = TRUE, \n                     sep = \",\", \n                     check.names = FALSE)\n      close(con)\n      \n      # Print parsed data for debugging\n      cat(\"Parsed data structure:\\n\")\n      print(str(df))\n      print(head(df))\n      \n      # Check if required columns exist\n      required_cols <- c(\"date\", \"item_name\", \"amount\", \"category\")\n      missing_cols <- required_cols[!required_cols %in% colnames(df)]\n      \n      if (length(missing_cols) > 0) {\n        output$text_preview_ui <- renderUI({\n          div(\n            class = \"alert alert-danger\",\n            h5(\"Error: Missing Columns\"),\n            p(\"The following required columns are missing:\"),\n            tags$ul(\n              lapply(missing_cols, function(col) {\n                tags$li(col)\n              })\n            ),\n            p(\"Make sure your data has these columns or add a header row.\")\n          )\n        })\n        shinyjs::hide(\"import_text_button_container\")\n        parsed_text_data(NULL)  # Clear any previously stored data\n        return()\n      }\n      \n      # Validate data types\n      validation_errors <- c()\n      \n      # Check date format\n      invalid_dates <- which(!grepl(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\", df$date))\n      if (length(invalid_dates) > 0) {\n        validation_errors <- c(validation_errors, \n                               sprintf(\"Invalid date format in rows: %s. Use YYYY-MM-DD format.\", \n                                       paste(invalid_dates[1:min(length(invalid_dates), 5)], collapse = \", \")))\n      }\n      \n      # Check amount is numeric\n      if (!is.numeric(df$amount)) {\n        df$amount <- as.numeric(df$amount)\n        invalid_amounts <- which(is.na(df$amount))\n        if (length(invalid_amounts) > 0) {\n          validation_errors <- c(validation_errors, \n                                 sprintf(\"Invalid amount values in rows: %s. Use numeric values.\", \n                                         paste(invalid_amounts[1:min(length(invalid_amounts), 5)], collapse = \", \")))\n        }\n      }\n      \n      # Check category is valid\n      invalid_categories <- which(!df$category %in% expense_categories)\n      if (length(invalid_categories) > 0) {\n        validation_errors <- c(validation_errors, \n                               sprintf(\"Invalid categories in rows: %s. Categories must be one of: %s\", \n                                       paste(invalid_categories[1:min(length(invalid_categories), 5)], collapse = \", \"),\n                                       paste(expense_categories, collapse = \", \")))\n      }\n      \n      # If validation errors exist, show them\n      if (length(validation_errors) > 0) {\n        output$text_preview_ui <- renderUI({\n          div(\n            class = \"alert alert-danger\",\n            h5(\"Validation Errors:\"),\n            tags$ul(\n              lapply(validation_errors, function(error) {\n                tags$li(error)\n              })\n            )\n          )\n        })\n        shinyjs::hide(\"import_text_button_container\")\n        parsed_text_data(NULL)  # Clear any previously stored data\n        return()\n      }\n      \n      # Store the valid data frame in our reactive value for later use\n      parsed_text_data(df)\n      cat(\"Data stored in reactive value, row count:\", nrow(df), \"\\n\")\n      \n      # Show preview table\n      preview_rows <- min(nrow(df), 5)  # Preview first 5 rows\n      \n      # Format the preview data\n      preview_df <- df[1:preview_rows, ]\n      \n      # Make the import button visible\n      shinyjs::show(\"import_text_button_container\")\n      \n      output$text_preview_ui <- renderUI({\n        div(\n          class = \"upload-preview\",\n          h5(sprintf(\"Preview (showing %d of %d rows):\", preview_rows, nrow(df))),\n          div(style = \"overflow-x: auto;\",\n              renderTable({\n                preview_df\n              }, striped = TRUE, bordered = TRUE, align = \"l\")\n          ),\n          p(sprintf(\"Total records to import: %d\", nrow(df))),\n          div(\n            class = \"alert alert-success\",\n            \"Data looks good! Click 'Import Text Data' to add these records to your account.\"\n          )\n        )\n      })\n      \n    }, error = function(e) {\n      # Hide the import button\n      shinyjs::hide(\"import_text_button_container\")\n      parsed_text_data(NULL)  # Clear any previously stored data\n      \n      # Print error for debugging\n      cat(\"Error parsing data:\", e$message, \"\\n\")\n      \n      output$text_preview_ui <- renderUI({\n        div(\n          class = \"alert alert-danger\",\n          h5(\"Error Parsing Data\"),\n          p(\"There was an error parsing your data:\"),\n          p(e$message),\n          p(\"Please make sure your data is in proper CSV format.\")\n        )\n      })\n    })\n  })\n  \n  # Initialize reactive values\n  user_data <- reactiveValues(\n    user_id = NULL,\n    username = NULL,\n    display_name = NULL,\n    is_authenticated = FALSE\n  )\n  \n  # Add a reactive value to store theme, font, and currency preferences\n  # Explicitly set light theme as default\n  app_settings <- reactiveValues(\n    theme = \"light\",\n    font = \"Arial\",\n    currency = \"GBP\",\n    currency_symbol = \"Â£\"\n  )\n  \n  # Add reactive value to track expense changes\n  expense_tracker <- reactiveValues(\n    update_counter = 0,\n    shown_dialogs = list()  # Add dialog tracking here\n  )\n  \n  # Update currency sign next to Amount automatically\n  observeEvent(app_settings$currency, {\n    if (user_data$is_authenticated) {\n      # Update the Amount label with the current currency symbol\n      updateNumericInput(\n        session,\n        \"expense_amount\",\n        label = paste0(\"Amount (\", app_settings$currency_symbol, \")\"),\n        value = input$expense_amount  # Preserve current value\n      )\n      \n      # Update this part to use the period from user settings\n      period_text <- input$limit_period\n      period_text <- paste0(toupper(substr(period_text, 1, 1)), \n                            substr(period_text, 2, nchar(period_text)))\n      \n      updateNumericInput(\n        session,\n        \"spending_limit\",\n        label = paste0(period_text, \" Spending Limit (\", app_settings$currency_symbol, \")\"),\n        value = input$spending_limit  # Preserve current value\n      )\n    }\n  })\n  \n  # Update spending limit label when limit period changes\n  observeEvent(input$limit_period, {\n    if(user_data$is_authenticated) {\n      # Get the period text and capitalize first letter\n      period_text <- input$limit_period\n      period_text <- paste0(toupper(substr(period_text, 1, 1)), \n                            substr(period_text, 2, nchar(period_text)))\n      \n      # Update the spending limit label with both the period and currency symbol\n      updateNumericInput(\n        session,\n        \"spending_limit\",\n        label = paste0(period_text, \" Spending Limit (\", app_settings$currency_symbol, \")\"),\n        value = input$spending_limit  # Preserve current value\n      )\n    }\n  })\n  \n  # Also update the label when user first logs in\n  observeEvent(user_data$is_authenticated, {\n    if (user_data$is_authenticated) {\n      # Set initial amount label with currency symbol\n      updateNumericInput(\n        session,\n        \"expense_amount\",\n        label = paste0(\"Amount (\", app_settings$currency_symbol, \")\"),\n        value = 0\n      )\n      \n      # Update this part to use the period from user settings\n      period_text <- user_data$limit_period\n      period_text <- paste0(toupper(substr(period_text, 1, 1)), \n                            substr(period_text, 2, nchar(period_text)))\n      \n      updateNumericInput(\n        session,\n        \"spending_limit\",\n        label = paste0(period_text, \" Spending Limit (\", app_settings$currency_symbol, \")\"),\n        value = input$spending_limit  # Preserve current value\n      )\n    }\n  })\n  \n  # Direct theme application function - more reliable approach\n  apply_theme <- function() {\n    # Only apply when user is authenticated\n    req(user_data$is_authenticated)\n    \n    if(app_settings$theme == \"dark\") {\n      # Apply dark theme with JavaScript\n      shinyjs::runjs(\"toggleDarkMode(true);\")\n    } else {\n      # Apply light theme with JavaScript\n      shinyjs::runjs(\"toggleDarkMode(false);\")\n    }\n    \n    # Apply font\n    shinyjs::runjs(sprintf('\n      document.body.style.fontFamily = \"%s, sans-serif\";\n    ', app_settings$font));\n  }\n  \n  # Apply theme whenever it changes\n  observeEvent(app_settings$theme, {\n    if(user_data$is_authenticated) {\n      apply_theme()\n    }\n  })\n  \n  # Apply font whenever it changes\n  observeEvent(app_settings$font, {\n    if(user_data$is_authenticated) {\n      apply_theme()\n    }\n  })\n  \n  # Close database connection when session ends\n  session$onSessionEnded(function() {\n    if (exists(\"con\") && dbIsValid(con)) {\n      dbDisconnect(con)\n      cat(\"Database connection closed.\\n\")\n    }\n  })\n  \n  # Navbar title\n  output$navbar_title <- renderText({\n    if (user_data$is_authenticated) {\n      \"Budget Tracker\"\n    } else {\n      \"\"\n    }\n  })\n  \n  # Custom login handler\n  observeEvent(input$login_btn, {\n    req(input$username, input$password)\n    \n    # Query the database for this user\n    user_query <- sprintf(\n      \"SELECT id, username, password, display_name, theme, font, currency, spending_limit, limit_period FROM users WHERE username = '%s' LIMIT 1\", \n      input$username\n    )\n    \n    user_info <- dbGetQuery(con, user_query)\n    \n    # Check if user exists and password matches\n    if (nrow(user_info) > 0 && user_info$password == input$password) {\n      # Login successful\n      user_data$user_id <- user_info$id\n      user_data$username <- user_info$username\n      user_data$display_name <- user_info$display_name\n      user_data$is_authenticated <- TRUE\n      \n      # Set theme, font, and currency preferences\n      app_settings$theme <- ifelse(is.na(user_info$theme), \"light\", user_info$theme)\n      app_settings$font <- ifelse(is.na(user_info$font), \"Arial\", user_info$font)\n      app_settings$currency <- ifelse(is.na(user_info$currency), \"GBP\", user_info$currency)\n      \n      # Set spending limit preferences\n      user_data$spending_limit <- ifelse(is.na(user_info$spending_limit), 1000, user_info$spending_limit)\n      user_data$limit_period <- ifelse(is.na(user_info$limit_period), \"monthly\", user_info$limit_period)\n      \n      # Safely set currency symbol\n      if (!is.null(app_settings$currency) && app_settings$currency != \"\" && \n          !is.null(currency_symbols[[app_settings$currency]])) {\n        app_settings$currency_symbol <- currency_symbols[[app_settings$currency]]\n      } else {\n        app_settings$currency_symbol <- \"Â£\" # Default to pound if something goes wrong\n      }\n      \n      # Hide login panel, show app content\n      shinyjs::hide(\"login-panel\")\n      shinyjs::show(\"app-content\")\n      \n      # Update settings fields\n      updateTextInput(session, \"change_display_name\", value = user_data$display_name)\n      updateTextInput(session, \"view_username\", value = user_data$username)\n      updateSelectInput(session, \"select_theme\", selected = app_settings$theme)\n      updateSelectInput(session, \"select_font\", selected = app_settings$font)\n      updateSelectInput(session, \"select_currency\", selected = app_settings$currency)\n      updateNumericInput(session, \"spending_limit\", value = user_data$spending_limit)\n      updateSelectInput(session, \"limit_period\", selected = user_data$limit_period)\n      \n      # Clear login form\n      updateTextInput(session, \"username\", value = \"\")\n      updateTextInput(session, \"password\", value = \"\")\n      \n      # Activate home tab\n      updateTabsetPanel(session, \"main_tabs\", selected = \"home\")\n      \n      # Apply theme immediately\n      apply_theme()\n      \n      # Show success message with shinyalert\n      shinyalert(\n        title = \"Welcome!\",\n        text = paste0(\"Hello, \", user_data$display_name, \"! You have successfully logged in.\"),\n        type = \"success\",\n        timer = 2000,\n        showConfirmButton = FALSE\n      )\n    } else {\n      # Login failed\n      shinyalert(\n        title = \"Login Failed\",\n        text = \"Invalid username or password. Please try again.\",\n        type = \"error\"\n      )\n    }\n  })\n  \n  # Welcome message\n  output$welcome_message <- renderText({\n    if (user_data$is_authenticated) {\n      sprintf(\"Welcome back, %s!\", user_data$display_name)\n    } else {\n      \"Please log in\"\n    }\n  })\n  \n  # Toggle registration form\n  observeEvent(input$register_btn, {\n    shinyjs::hide(\"login-panel\")\n    shinyjs::show(\"register-panel\")\n  })\n  \n  # Back to login\n  observeEvent(input$back_to_login_btn, {\n    shinyjs::hide(\"register-panel\")\n    shinyjs::show(\"login-panel\")\n  })\n  \n  # Show settings\n  observeEvent(input$show_settings_btn, {\n    shinyjs::show(\"settings-panel\")\n  })\n  \n  # Hide settings\n  observeEvent(input$close_settings_btn, {\n    shinyjs::hide(\"settings-panel\")\n  })\n  \n  # Remove account handler\n  observeEvent(input$remove_account_btn, {\n    # Show confirmation dialog with shinyalert\n    shinyalert(\n      title = \"Remove Account\",\n      text = \"Are you sure you want to remove your account? All your details will be removed once you click yes.\",\n      type = \"warning\",\n      showCancelButton = TRUE,\n      confirmButtonText = \"Yes, remove my account\",\n      cancelButtonText = \"No, keep my account\",\n      confirmButtonCol = \"#dc3545\",\n      callbackR = function(confirmed) {\n        if (confirmed) {\n          # User confirmed deletion\n          tryCatch({\n            # First delete all user's expenses\n            dbExecute(\n              con,\n              sprintf(\n                \"DELETE FROM expenses WHERE user_id = %d\",\n                user_data$user_id\n              )\n            )\n            \n            # Then delete the user account\n            dbExecute(\n              con,\n              sprintf(\n                \"DELETE FROM users WHERE id = %d\",\n                user_data$user_id\n              )\n            )\n            \n            # Reset user data\n            user_data$user_id <- NULL\n            user_data$username <- NULL\n            user_data$display_name <- NULL\n            user_data$is_authenticated <- FALSE\n            \n            # Show login, hide panels\n            shinyjs::hide(\"settings-panel\")\n            shinyjs::hide(\"app-content\")\n            shinyjs::show(\"login-panel\")\n            \n            # Show farewell message\n            shinyalert(\n              title = \"Account Removed\",\n              text = \"All your data are deleted - we are sorry to see you go ð¢\",\n              type = \"info\"\n            )\n          }, error = function(e) {\n            # Error handling\n            print(paste(\"Error removing account:\", e$message))\n            shinyalert(\n              title = \"Error\",\n              text = \"There was a problem removing your account. Please try again later.\",\n              type = \"error\"\n            )\n          })\n        }\n      }\n    )\n  })\n  \n  # Create new account\n  observeEvent(input$create_account_btn, {\n    req(input$new_username, input$new_password, input$new_display_name)\n    \n    # Check if username exists\n    exists <- dbGetQuery(\n      con, \n      sprintf(\"SELECT COUNT(*) as count FROM users WHERE username = '%s'\", input$new_username)\n    )\n    \n    if (exists$count > 0) {\n      showNotification(\"Username already exists. Please choose another.\", type = \"error\")\n    } else {\n      # Escape single quotes in strings\n      safe_username <- gsub(\"'\", \"''\", input$new_username)\n      safe_password <- gsub(\"'\", \"''\", input$new_password)\n      safe_display_name <- gsub(\"'\", \"''\", input$new_display_name)\n      \n      # Insert new user\n      dbExecute(\n        con,\n        sprintf(\n          \"INSERT INTO users (username, password, display_name, theme, font, currency) VALUES ('%s', '%s', '%s', 'light', 'Arial', 'GBP')\",\n          safe_username, safe_password, safe_display_name\n        )\n      )\n      \n      # Show success message with shinyalert\n      shinyalert(\n        title = \"Account Created\",\n        text = \"Your account has been created successfully. Please log in.\",\n        type = \"success\"\n      )\n      \n      # Reset form and go back to login\n      updateTextInput(session, \"new_username\", value = \"\")\n      updateTextInput(session, \"new_password\", value = \"\")\n      updateTextInput(session, \"new_display_name\", value = \"\")\n      \n      shinyjs::hide(\"register-panel\")\n      shinyjs::show(\"login-panel\")\n    }\n  })\n  \n  # Save settings\n  observeEvent(input$save_settings_btn, {\n    req(user_data$user_id)\n    \n    changes_made <- FALSE\n    appearance_changed <- FALSE\n    \n    # Update display name\n    if (!is.null(input$change_display_name) && input$change_display_name != user_data$display_name) {\n      tryCatch({\n        # Escape single quotes\n        safe_display_name <- gsub(\"'\", \"''\", input$change_display_name)\n        \n        dbExecute(\n          con,\n          sprintf(\n            \"UPDATE users SET display_name = '%s' WHERE id = %d\",\n            safe_display_name, user_data$user_id\n          )\n        )\n        user_data$display_name <- input$change_display_name\n        changes_made <- TRUE\n      }, error = function(e) {\n        print(paste(\"Error updating display name:\", e$message))\n      })\n    }\n    \n    # Update password if provided\n    if (!is.null(input$change_password) && input$change_password != \"\") {\n      tryCatch({\n        # Escape single quotes\n        safe_password <- gsub(\"'\", \"''\", input$change_password)\n        \n        dbExecute(\n          con,\n          sprintf(\n            \"UPDATE users SET password = '%s' WHERE id = %d\",\n            safe_password, user_data$user_id\n          )\n        )\n        # Clear password field\n        updateTextInput(session, \"change_password\", value = \"\")\n        changes_made <- TRUE\n      }, error = function(e) {\n        print(paste(\"Error updating password:\", e$message))\n      })\n    }\n    \n    # Update theme\n    if (!is.null(input$select_theme) && input$select_theme != app_settings$theme) {\n      tryCatch({\n        dbExecute(\n          con,\n          sprintf(\n            \"UPDATE users SET theme = '%s' WHERE id = %d\",\n            input$select_theme, user_data$user_id\n          )\n        )\n        app_settings$theme <- input$select_theme\n        changes_made <- TRUE\n        appearance_changed <- TRUE\n        \n        # Apply theme immediately\n        apply_theme()\n      }, error = function(e) {\n        print(paste(\"Error updating theme:\", e$message))\n      })\n    }\n    \n    # Update font\n    if (!is.null(input$select_font) && input$select_font != app_settings$font) {\n      tryCatch({\n        dbExecute(\n          con,\n          sprintf(\n            \"UPDATE users SET font = '%s' WHERE id = %d\",\n            input$select_font, user_data$user_id\n          )\n        )\n        app_settings$font <- input$select_font\n        changes_made <- TRUE\n        appearance_changed <- TRUE\n        \n        # Apply font immediately\n        apply_theme()\n      }, error = function(e) {\n        print(paste(\"Error updating font:\", e$message))\n      })\n    }\n    \n    # Update currency\n    if (!is.null(input$select_currency) && input$select_currency != app_settings$currency) {\n      tryCatch({\n        dbExecute(\n          con,\n          sprintf(\n            \"UPDATE users SET currency = '%s' WHERE id = %d\",\n            input$select_currency, user_data$user_id\n          )\n        )\n        app_settings$currency <- input$select_currency\n        # Make sure to use the correct currency symbol based on the selection\n        currency_symbol_value <- currency_symbols[[app_settings$currency]]\n        if (!is.null(currency_symbol_value) && length(currency_symbol_value) > 0) {\n          app_settings$currency_symbol <- currency_symbol_value\n        } else {\n          # Default to currency code if symbol not found\n          app_settings$currency_symbol <- app_settings$currency\n        }\n        changes_made <- TRUE\n        appearance_changed <- TRUE\n      }, error = function(e) {\n        print(paste(\"Error updating currency:\", e$message))\n      })\n    }\n    \n    # Update spending limit - NEW ADDITION - MOVED INSIDE OBSERVE EVENT\n    if (!is.null(input$spending_limit) && input$spending_limit != user_data$spending_limit) {\n      tryCatch({\n        dbExecute(\n          con,\n          sprintf(\n            \"UPDATE users SET spending_limit = %.2f WHERE id = %d\",\n            input$spending_limit, user_data$user_id\n          )\n        )\n        user_data$spending_limit <- input$spending_limit\n        changes_made <- TRUE\n      }, error = function(e) {\n        print(paste(\"Error updating spending limit:\", e$message))\n      })\n    }\n    \n    # Update limit period - NEW ADDITION - MOVED INSIDE OBSERVE EVENT\n    if (!is.null(input$limit_period) && input$limit_period != user_data$limit_period) {\n      tryCatch({\n        dbExecute(\n          con,\n          sprintf(\n            \"UPDATE users SET limit_period = '%s' WHERE id = %d\",\n            input$limit_period, user_data$user_id\n          )\n        )\n        user_data$limit_period <- input$limit_period\n        changes_made <- TRUE\n      }, error = function(e) {\n        print(paste(\"Error updating limit period:\", e$message))\n      })\n    }\n    \n    if (changes_made) {\n      # Show success message with shinyalert\n      shinyalert(\n        title = \"Settings Saved\",\n        text = \"Your settings have been updated successfully.\",\n        type = \"success\",\n        timer = 2000,\n        showConfirmButton = FALSE\n      )\n      \n      # Only return to app content if appearance wasn't changed\n      # If appearance was changed, stay on the settings page\n      if (!appearance_changed) {\n        shinyjs::hide(\"settings-panel\")\n        shinyjs::show(\"app-content\")\n      }\n    }\n  })\n  \n  # Make calculate_current_spending reactive to expense changes\n  calculate_current_spending <- reactive({\n    req(user_data$user_id, user_data$limit_period)\n    \n    # Add explicit dependency on expense tracker\n    # This ensures recalculation when expenses are added/edited/deleted\n    expense_tracker$update_counter\n    \n    # Define date range based on limit period\n    end_date <- Sys.Date()\n    \n    if(user_data$limit_period == \"monthly\") {\n      # First day of current month\n      start_date <- as.Date(format(end_date, \"%Y-%m-01\"))\n    } else if(user_data$limit_period == \"weekly\") {\n      # First day of current week (Monday)\n      days_since_monday <- as.numeric(format(end_date, \"%u\")) - 1\n      start_date <- end_date - days_since_monday\n    } else {\n      # Fallback\n      start_date <- end_date - 30\n    }\n    \n    # Query expenses for the period\n    # Use dbSendQuery + dbFetch to ensure we're not getting cached results\n    con_query <- dbSendQuery(con, sprintf(\n      \"SELECT SUM(amount) as total FROM expenses WHERE user_id = %d AND date >= '%s' AND date <= '%s'\",\n      user_data$user_id, start_date, end_date\n    ))\n    result <- dbFetch(con_query)\n    dbClearResult(con_query)\n    \n    # For debugging - print to console\n    cat(\"Recalculating spending: Counter =\", expense_tracker$update_counter, \n        \", Total =\", ifelse(is.null(result$total) || is.na(result$total), 0, result$total), \"\\n\")\n    \n    # Return total or 0 if NULL\n    if(is.null(result$total) || is.na(result$total)) return(0)\n    return(result$total)\n  })\n  \n  # Add expense\n  observeEvent(input$add_expense_btn, {\n    req(user_data$user_id, input$expense_date, input$expense_name, \n        input$expense_amount, input$expense_category)\n    \n    # Escape single quotes in strings by replacing them with two single quotes\n    safe_item_name <- gsub(\"'\", \"''\", input$expense_name)\n    safe_category <- gsub(\"'\", \"''\", input$expense_category)\n    \n    # Insert expense\n    dbExecute(\n      con,\n      sprintf(\n        \"INSERT INTO expenses (user_id, date, item_name, amount, category) VALUES (%d, '%s', '%s', %.2f, '%s')\",\n        user_data$user_id, input$expense_date, safe_item_name, \n        input$expense_amount, safe_category\n      )\n    )\n    \n    # Increment the update counter to trigger UI refresh\n    expense_tracker$update_counter <- expense_tracker$update_counter + 1\n    \n    # Reset form\n    updateTextInput(session, \"expense_name\", value = \"\")\n    updateNumericInput(session, \"expense_amount\", value = 0)\n    \n    # Show success message with shinyalert - Pass current currency to format_currency\n    shinyalert(\n      title = \"Expense Added\",\n      text = sprintf(\"Your expense of %s for %s has been added successfully.\",\n                     format_currency(input$expense_amount, app_settings$currency), input$expense_name),\n      type = \"success\",\n      timer = 2000,\n      showConfirmButton = FALSE\n    )\n  })\n  \n  # Budget progress output\n  output$budget_progress <- renderUI({\n    req(user_data$is_authenticated)\n    \n    # Create direct dependency on the expense tracker counter\n    expense_tracker$update_counter\n    \n    # Get current spending and limit\n    current_spending <- calculate_current_spending()\n    spending_limit <- user_data$spending_limit\n    \n    # Calculate percentage\n    percentage <- min(100, round(current_spending / spending_limit * 100))\n    \n    # Define both color classes and direct color styles\n    bar_color <- if(percentage >= 80) \"#dc3545\" else if(percentage >= 60) \"#ffc107\" else \"#28a745\"\n    bar_class <- if(percentage >= 80) \"bg-danger\" else if(percentage >= 60) \"bg-warning\" else \"bg-success\"\n    \n    # Ensure stripes are visible with both class and direct style\n    has_stripes <- percentage >= 90\n    stripe_style <- if(has_stripes) \"\n    background-image: linear-gradient(45deg, \n      rgba(255, 255, 255, .15) 25%, \n      transparent 25%, \n      transparent 50%, \n      rgba(255, 255, 255, .15) 50%, \n      rgba(255, 255, 255, .15) 75%, \n      transparent 75%, \n      transparent);\n    background-size: 1rem 1rem;\n    animation: progress-bar-stripes 1s linear infinite;\n  \" else \"\"\n    \n    active_class <- if(has_stripes) \" progress-bar-striped progress-bar-animated\" else \"\"\n    \n    # Period text\n    period_text <- get_period_range_text(user_data$limit_period)\n    \n    tagList(\n      # Add the keyframe animation definition\n      tags$style(HTML(\"\n      @keyframes progress-bar-stripes {\n        from { background-position: 1rem 0; }\n        to { background-position: 0 0; }\n      }\n    \")),\n      \n      div(style = \"margin-bottom: 10px; display: flex; justify-content: space-between;\",\n          span(sprintf(\"Period: %s\", period_text)),\n          span(sprintf(\"%s of %s limit\", \n                       format_currency(current_spending, app_settings$currency),\n                       format_currency(spending_limit, app_settings$currency)))\n      ),\n      div(class = \"progress\", style = \"height: 25px; background-color: #e9ecef;\",\n          div(\n            class = paste(\"progress-bar\", bar_class, active_class), \n            role = \"progressbar\",\n            style = sprintf(\"width: %d%%; background-color: %s; %s\", \n                            percentage, bar_color, stripe_style),\n            `aria-valuenow` = percentage,\n            `aria-valuemin` = 0,\n            `aria-valuemax` = 100,\n            sprintf(\"%d%%\", percentage)\n          )\n      )\n    )\n  })\n  \n  # Modal control for edit expense\n  observeEvent(input$close_edit_modal_btn, {\n    shinyjs::hide(\"edit-expense-modal\")\n    shinyjs::runjs(\"hideEditModal();\")\n  })\n  \n  observeEvent(input$cancel_edit_btn, {\n    shinyjs::hide(\"edit-expense-modal\")\n    shinyjs::runjs(\"hideEditModal();\")\n  })\n  \n  # Save edited expense with improved validation\n  observeEvent(input$save_edit_btn, {\n    req(input$edit_expense_date, input$edit_expense_name, \n        input$edit_expense_amount, input$edit_expense_category)\n    \n    # More robust expense ID validation\n    expense_id_str <- input$edit_expense_id\n    \n    # Log for debugging (you can remove this in production)\n    cat(\"Expense ID from form:\", expense_id_str, \"\\n\")\n    \n    # Try to convert to integer, catch any errors\n    expense_id <- tryCatch({\n      id <- as.integer(expense_id_str)\n      if (is.na(id) || id <= 0) NA else id\n    }, error = function(e) {\n      cat(\"Error converting expense ID:\", e$message, \"\\n\")\n      NA\n    })\n    \n    if (is.na(expense_id)) {\n      shinyalert(\n        title = \"Error\",\n        text = \"Invalid expense ID. Please try again.\",\n        type = \"error\"\n      )\n      return()\n    }\n    \n    # Update the expense in the database\n    tryCatch({\n      # Use safer query building with paste0 instead of sprintf\n      update_query <- paste0(\n        \"UPDATE expenses SET date = '\", input$edit_expense_date, \n        \"', item_name = '\", gsub(\"'\", \"''\", input$edit_expense_name), \n        \"', amount = \", input$edit_expense_amount, \n        \", category = '\", gsub(\"'\", \"''\", input$edit_expense_category), \n        \"' WHERE id = \", expense_id, \n        \" AND user_id = \", user_data$user_id\n      )\n      \n      dbExecute(con, update_query)\n      \n      # Increment the update counter to trigger UI refresh\n      expense_tracker$update_counter <- expense_tracker$update_counter + 1\n      \n      # Hide the modal\n      shinyjs::hide(\"edit-expense-modal\")\n      shinyjs::runjs(\"hideEditModal();\")\n      \n      # Show success message\n      shinyalert(\n        title = \"Expense Updated\",\n        text = \"Your expense has been updated successfully.\",\n        type = \"success\",\n        timer = 2000,\n        showConfirmButton = FALSE\n      )\n    }, error = function(e) {\n      cat(\"Error updating expense:\", e$message, \"\\n\")\n      shinyalert(\n        title = \"Error\",\n        text = \"There was a problem updating the expense. Please try again.\",\n        type = \"error\"\n      )\n    })\n  })\n  \n  # Edit expense handler\n  observeEvent(eventExpr = {\n    lapply(names(input)[grepl(\"^edit_expense_\", names(input))], function(x) input[[x]])\n  }, {\n    # Get all button names that match the pattern\n    btn_ids <- names(input)[grepl(\"^edit_expense_\", names(input))]\n    \n    if (length(btn_ids) > 0) {\n      # Create a vector of button values\n      btn_values <- sapply(btn_ids, function(x) input[[x]])\n      \n      # Only proceed if any button has been clicked (value > 0)\n      if(any(btn_values > 0)) {\n        # Find which button has the maximum value (was clicked)\n        max_idx <- which.max(btn_values)\n        \n        # Make sure we got a valid index\n        if (length(max_idx) > 0 && !is.na(max_idx) && max_idx > 0) {\n          btn_id <- btn_ids[max_idx]\n          \n          if (!is.null(btn_id) && !is.na(btn_id)) {\n            # Extract the expense ID from the button ID\n            id_text <- gsub(\"edit_expense_\", \"\", btn_id)\n            \n            # Verify we have a numeric ID\n            if (!is.na(id_text) && nchar(id_text) > 0) {\n              expense_id <- as.integer(id_text)\n              \n              if (!is.na(expense_id) && expense_id > 0) {\n                # Query the expense data safely\n                tryCatch({\n                  query <- paste0(\"SELECT * FROM expenses WHERE id = \", expense_id, \" AND user_id = \", user_data$user_id)\n                  expense_data <- dbGetQuery(con, query)\n                  \n                  if (nrow(expense_data) > 0) {\n                    # Populate the edit form\n                    updateDateInput(session, \"edit_expense_date\", value = as.Date(expense_data$date))\n                    updateTextInput(session, \"edit_expense_name\", value = expense_data$item_name)\n                    updateNumericInput(session, \"edit_expense_amount\", \n                                       label = paste0(\"Amount (\", app_settings$currency_symbol, \")\"),\n                                       value = expense_data$amount)\n                    updateSelectInput(session, \"edit_expense_category\", selected = expense_data$category)\n                    updateTextInput(session, \"edit_expense_id\", value = as.character(expense_id))\n                    \n                    # Show the modal\n                    shinyjs::show(\"edit-expense-modal\")\n                    \n                    # Add JavaScript to ensure modal is visible\n                    shinyjs::runjs(\"showEditModal();\")\n                  }\n                }, error = function(e) {\n                  # Log the error\n                  cat(\"Error querying expense data:\", e$message, \"\\n\")\n                  shinyalert(\n                    title = \"Error\",\n                    text = \"There was a problem loading the expense data. Please try again.\",\n                    type = \"error\"\n                  )\n                })\n              }\n            }\n          }\n        }\n      }\n    }\n  }, ignoreInit = TRUE)\n  \n  # Delete expense handler\n  observeEvent(eventExpr = {\n    lapply(names(input)[grepl(\"^delete_expense_\", names(input))], function(x) input[[x]])\n  }, {\n    # Get all button names that match the pattern\n    btn_ids <- names(input)[grepl(\"^delete_expense_\", names(input))]\n    \n    if (length(btn_ids) > 0) {\n      # Create a vector of button values\n      btn_values <- sapply(btn_ids, function(x) input[[x]])\n      \n      # Only proceed if any button has been clicked (value > 0)\n      if(any(btn_values > 0)) {\n        # Find which button has the maximum value (was clicked)\n        max_idx <- which.max(btn_values)\n        \n        # Make sure we got a valid index\n        if (length(max_idx) > 0 && !is.na(max_idx) && max_idx > 0) {\n          btn_id <- btn_ids[max_idx]\n          \n          if (!is.null(btn_id) && !is.na(btn_id)) {\n            # Extract the expense ID from the button ID\n            id_text <- gsub(\"delete_expense_\", \"\", btn_id)\n            \n            # Verify we have a numeric ID\n            if (!is.na(id_text) && nchar(id_text) > 0) {\n              expense_id <- as.integer(id_text)\n              \n              if (!is.na(expense_id) && expense_id > 0) {\n                # MODIFIED: Use the reactive value instead of global variable\n                # Create a unique key for this button click\n                click_key <- paste0(btn_id, \"_\", input[[btn_id]])\n                \n                # Only show the dialog if we haven't shown it for this click\n                if (!(click_key %in% names(expense_tracker$shown_dialogs))) {\n                  # Set the button state to 0 immediately to prevent multiple triggers\n                  shinyjs::runjs(paste0(\"Shiny.setInputValue('\", btn_id, \"', 0, {priority: 'event'});\"))\n                  \n                  # Add this click to shown dialogs\n                  temp_dialogs <- expense_tracker$shown_dialogs\n                  temp_dialogs[[click_key]] <- TRUE\n                  expense_tracker$shown_dialogs <- temp_dialogs\n                  \n                  # Query the expense data safely\n                  tryCatch({\n                    query <- paste0(\"SELECT * FROM expenses WHERE id = \", expense_id, \" AND user_id = \", user_data$user_id)\n                    expense_data <- dbGetQuery(con, query)\n                    \n                    if (nrow(expense_data) > 0) {\n                      # Format the amount with currency\n                      formatted_amount <- format_currency(expense_data$amount, app_settings$currency)\n                      formatted_date <- format(as.Date(expense_data$date), \"%d %b %Y\")\n                      \n                      # Show confirmation dialog\n                      shinyalert(\n                        title = \"Delete Expense\",\n                        text = sprintf(\"Are you sure you want to delete the expense '%s' for %s on %s?\", \n                                       expense_data$item_name, formatted_amount, formatted_date),\n                        type = \"warning\",\n                        showCancelButton = TRUE,\n                        confirmButtonText = \"Yes, delete it\",\n                        cancelButtonText = \"Cancel\",\n                        confirmButtonCol = \"#dc3545\",\n                        callbackR = function(confirmed) {\n                          # MODIFIED: Remove from shown dialogs after handling\n                          temp_dialogs <- expense_tracker$shown_dialogs\n                          temp_dialogs[[click_key]] <- NULL\n                          expense_tracker$shown_dialogs <- temp_dialogs\n                          \n                          if (confirmed) {\n                            # User confirmed deletion, delete the expense\n                            tryCatch({\n                              delete_query <- paste0(\"DELETE FROM expenses WHERE id = \", expense_id, \" AND user_id = \", user_data$user_id)\n                              dbExecute(con, delete_query)\n                              \n                              # Increment the update counter to trigger UI refresh\n                              expense_tracker$update_counter <- expense_tracker$update_counter + 1\n                              \n                              # Show success message\n                              shinyalert(\n                                title = \"Expense Deleted\",\n                                text = \"The expense has been deleted successfully.\",\n                                type = \"success\",\n                                timer = 2000,\n                                showConfirmButton = FALSE\n                              )\n                            }, error = function(e) {\n                              # Error handling\n                              cat(\"Error deleting expense:\", e$message, \"\\n\")\n                              shinyalert(\n                                title = \"Error\",\n                                text = \"There was a problem deleting the expense.\",\n                                type = \"error\"\n                              )\n                            })\n                          }\n                        }\n                      )\n                    }\n                  }, error = function(e) {\n                    # Log the error\n                    cat(\"Error querying expense data for deletion:\", e$message, \"\\n\")\n                    \n                    # Remove from shown dialogs on error\n                    temp_dialogs <- expense_tracker$shown_dialogs\n                    temp_dialogs[[click_key]] <- NULL\n                    expense_tracker$shown_dialogs <- temp_dialogs\n                  })\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }, ignoreInit = TRUE)\n  \n  # Reactive function to get expense chart data\n  get_expense_chart_data <- reactive({\n    req(user_data$user_id)\n    \n    # Add explicit dependency on expense tracker to ensure updates when expenses change\n    expense_tracker$update_counter\n    \n    # Apply date filters\n    date_filter <- \"\"\n    if (!is.null(input$date_range_start) && !is.null(input$date_range_end)) {\n      date_filter <- sprintf(\"AND date BETWEEN '%s' AND '%s'\", \n                             input$date_range_start, input$date_range_end)\n    }\n    \n    # Get expenses grouped by category\n    expenses <- dbGetQuery(\n      con,\n      sprintf(\n        \"SELECT category, SUM(amount) as total FROM expenses \n        WHERE user_id = %d %s \n        GROUP BY category\n        ORDER BY total DESC\",\n        user_data$user_id, date_filter\n      )\n    )\n    \n    # Return the data for the chart\n    return(expenses)\n  })\n  \n  # Create the donut chart\n  output$expense_donut_chart <- renderEcharts4r({\n    req(user_data$is_authenticated)\n    \n    # Get the data\n    chart_data <- get_expense_chart_data()\n    \n    # Check if we have data\n    if(nrow(chart_data) == 0) {\n      return(NULL)\n    }\n    \n    # Format currency values for the tooltip\n    tooltip_formatter <- sprintf(\"function(params) {\n      return params.name + ': %s' + params.value.toFixed(2) + ' (' + params.percent + '%%)'\n    }\", app_settings$currency_symbol)\n    \n    # Create the donut chart\n    chart <- chart_data |>\n      e_charts(category) |>\n      e_pie(total, radius = c(\"40%\", \"70%\")) |>  # Use radius to create a donut chart\n      e_tooltip(formatter = htmlwidgets::JS(tooltip_formatter))\n    \n    # Apply theme based on app settings\n    if(app_settings$theme == \"dark\") {\n      chart <- chart |> e_theme(\"dark\")\n    }\n    \n    # Add save as image feature\n    chart <- chart |> e_toolbox_feature(feature = \"saveAsImage\")\n    \n    return(chart)\n  })\n  \n  # Function to generate expense list content\n  expense_list_content <- function() {\n    req(user_data$user_id)\n    \n    # Apply filters\n    date_filter <- \"\"\n    if (!is.null(input$date_range_start) && !is.null(input$date_range_end)) {\n      date_filter <- sprintf(\"AND date BETWEEN '%s' AND '%s'\", \n                             input$date_range_start, input$date_range_end)\n    }\n    \n    category_filter <- \"\"\n    if (!is.null(input$expense_filter) && length(input$expense_filter) > 0) {\n      categories <- paste0(\"'\", input$expense_filter, \"'\", collapse = \",\")\n      category_filter <- sprintf(\"AND category IN (%s)\", categories)\n    }\n    \n    # Get expenses\n    expenses <- dbGetQuery(\n      con,\n      sprintf(\n        \"SELECT id, date, item_name, amount, category FROM expenses \n    WHERE user_id = %d %s %s \n    ORDER BY date DESC, id DESC \n    LIMIT 100\",\n        user_data$user_id, date_filter, category_filter\n      )\n    )\n    \n    if (nrow(expenses) == 0) {\n      return(div(\n        style = \"text-align: center; padding: 20px;\",\n        \"No expenses found for the selected criteria.\"\n      ))\n    }\n    \n    # Calculate total\n    total <- sum(expenses$amount)\n    \n    # Create a simple HTML table\n    result <- div(\n      style = \"overflow-x: auto;\",\n      tags$table(\n        class = \"table table-striped\",\n        tags$thead(\n          tags$tr(\n            tags$th(\"Date\"),\n            tags$th(\"Description\"),\n            tags$th(\"Category\"),\n            tags$th(\"Amount\"),\n            tags$th(\"Actions\", style = \"text-align: center;\")\n          )\n        ),\n        tags$tbody(\n          lapply(1:nrow(expenses), function(i) {\n            exp <- expenses[i, ]\n            tags$tr(\n              tags$td(format(as.Date(exp$date), \"%d %b %Y\")),\n              tags$td(exp$item_name),\n              tags$td(exp$category),\n              tags$td(sprintf(\"%s%.2f\", app_settings$currency_symbol, exp$amount), style = \"text-align: right;\"),\n              tags$td(\n                style = \"text-align: center; white-space: nowrap;\",\n                actionButton(\n                  inputId = paste0(\"edit_expense_\", exp$id),\n                  label = NULL,\n                  icon = icon(\"edit\"),\n                  class = \"btn-sm btn-primary\",\n                  style = \"margin-right: 5px;\"\n                ),\n                actionButton(\n                  inputId = paste0(\"delete_expense_\", exp$id),\n                  label = NULL,\n                  icon = icon(\"trash\"),\n                  class = \"btn-sm btn-danger\",\n                  `data-version` = expense_tracker$update_counter  # Add a version attribute to track UI refreshes\n                )\n              )\n            )\n          })\n        ),\n        tags$tfoot(\n          tags$tr(\n            tags$th(colspan = 3, \"Total\", style = \"text-align: right;\"),\n            tags$th(sprintf(\"%s%.2f\", app_settings$currency_symbol, total), style = \"text-align: right;\")\n          )\n        )\n      )\n    )\n    \n    # Reset button states when refreshing the expense list\n    shinyjs::runjs(\"\n      // Reset all edit and delete button states to initial state\n      setTimeout(function() {\n        var editButtons = document.querySelectorAll('[id^=\\\"edit_expense_\\\"]');\n        var deleteButtons = document.querySelectorAll('[id^=\\\"delete_expense_\\\"]');\n        \n        editButtons.forEach(function(btn) {\n          Shiny.setInputValue(btn.id, 0, {priority: 'event'});\n        });\n        \n        deleteButtons.forEach(function(btn) {\n          Shiny.setInputValue(btn.id, 0, {priority: 'event'});\n        });\n      }, 100);\n    \")\n    \n    # Reset shown_dialogs when refreshing UI\n    expense_tracker$shown_dialogs <- list()\n    \n    return(result)\n  }\n  \n  # Expense list UI output\n  output$expense_list <- renderUI({\n    req(user_data$user_id)\n    \n    # Add dependency on the expense tracker to force updates\n    expense_tracker$update_counter\n    \n    result <- expense_list_content()\n    \n    # Add inline CSS for dark mode table styles if in dark mode\n    if(app_settings$theme == \"dark\") {\n      result <- tagList(\n        tags$style(HTML(\"\n        #expense_list .table {\n          background-color: #1e1e1e !important;\n        }\n        #expense_list .table tbody tr {\n          background-color: #1e1e1e !important;\n        }\n        #expense_list .table tbody tr:nth-of-type(odd) {\n          background-color: #2a2a2a !important;\n        }\n        #expense_list .table tbody td {\n          background-color: inherit !important;\n          color: #FFFFFF !important;\n        }\n        #expense_list .table thead th {\n          background-color: #1e1e1e !important;\n          color: #FFFFFF !important;\n        }\n        #expense_list .table tfoot tr {\n          background-color: #1e1e1e !important;\n        }\n        #expense_list .table tfoot th {\n          background-color: #1e1e1e !important;\n          color: #FFFFFF !important;\n        }\n      \")),\n        result\n      )\n      \n      # Also apply the JavaScript styling after a short delay\n      shinyjs::delay(100, {\n        shinyjs::runjs('\n        if (typeof applyDarkModeToTables === \"function\") {\n          applyDarkModeToTables();\n        }\n      ')\n      })\n    }\n    \n    return(result)\n  })\n  \n  # Reactive function to get filtered expense data for export\n  get_filtered_expenses <- reactive({\n    req(user_data$user_id)\n    \n    # Apply filters\n    date_filter <- \"\"\n    if (!is.null(input$date_range_start) && !is.null(input$date_range_end)) {\n      date_filter <- sprintf(\"AND date BETWEEN '%s' AND '%s'\", \n                             input$date_range_start, input$date_range_end)\n    }\n    \n    category_filter <- \"\"\n    if (!is.null(input$expense_filter) && length(input$expense_filter) > 0) {\n      categories <- paste0(\"'\", input$expense_filter, \"'\", collapse = \",\")\n      category_filter <- sprintf(\"AND category IN (%s)\", categories)\n    }\n    \n    # Get expenses\n    expenses <- dbGetQuery(\n      con,\n      sprintf(\n        \"SELECT date, item_name, category, amount FROM expenses \n      WHERE user_id = %d %s %s \n      ORDER BY date DESC, id DESC \n      LIMIT 1000\", # Increased limit for exports\n        user_data$user_id, date_filter, category_filter\n      )\n    )\n    \n    # The formatting will be done by the download handler based on the export format\n    return(expenses)\n  })\n  \n  # Download handler for expense exports\n  output$download_expenses <- downloadHandler(\n    filename = function() {\n      format <- input$export_format\n      date_range <- format(Sys.Date(), \"%Y%m%d\")\n      \n      if (!is.null(input$date_range_start) && !is.null(input$date_range_end)) {\n        start_date <- format(as.Date(input$date_range_start), \"%Y%m%d\")\n        end_date <- format(as.Date(input$date_range_end), \"%Y%m%d\")\n        date_range <- paste0(start_date, \"-\", end_date)\n      }\n      \n      paste0(\"expenses_\", date_range, \".\", format)\n    },\n    \n    content = function(file) {\n      # Get filtered data\n      expenses <- get_filtered_expenses()\n      \n      # Format data based on export type\n      format <- input$export_format\n      \n      if (format == \"csv\" || format == \"txt\") {\n        # For CSV and TXT formats, use the same column names as import format\n        # and numeric amounts without currency symbols\n        \n        # Make a copy of the data frame\n        export_data <- expenses\n        \n        # Ensure date is in YYYY-MM-DD format for easy import\n        export_data$date <- format(as.Date(export_data$date), \"%Y-%m-%d\")\n        \n        # Make sure amount is numeric (no currency symbol)\n        export_data$amount <- as.numeric(export_data$amount)\n        \n        # Ensure column names match import format\n        colnames(export_data) <- c(\"date\", \"item_name\", \"category\", \"amount\")\n        \n        if (format == \"csv\") {\n          # Standard CSV export\n          write.csv(export_data, file, row.names = FALSE)\n        } else if (format == \"txt\") {\n          # Custom TXT export format (simple CSV in a TXT file)\n          # Using write.table with comma separator and no row names\n          write.table(export_data, file, sep = \",\", row.names = FALSE, \n                      col.names = TRUE, quote = TRUE)\n        }\n      } else if (format == \"xlsx\") {\n        # For Excel, use more user-friendly column names and formatted amounts\n        export_data <- expenses\n        \n        # Format date more nicely for Excel\n        export_data$date <- format(as.Date(export_data$date), \"%Y-%m-%d\")\n        \n        # Format amount with currency symbol for Excel\n        export_data$amount <- as.numeric(export_data$amount)\n        \n        # Use more readable column names\n        colnames(export_data) <- c(\"Date\", \"Description\", \"Category\", \"Amount\")\n        \n        writexl::write_xlsx(export_data, file)\n      } else if (format == \"json\") {\n        # For JSON, use original column names but clean formatting\n        export_data <- expenses\n        \n        # Format date consistently\n        export_data$date <- format(as.Date(export_data$date), \"%Y-%m-%d\")\n        \n        # Numeric amount without currency symbol\n        export_data$amount <- as.numeric(export_data$amount)\n        \n        # Convert to JSON\n        json_data <- jsonlite::toJSON(export_data, pretty = TRUE)\n        writeLines(json_data, file)\n      }\n    }\n  )\n  \n  # Update UI elements on date range changes\n  observeEvent(input$date_range_start, {\n    if(user_data$is_authenticated && app_settings$theme == \"dark\") {\n      shinyjs::delay(100, {\n        shinyjs::runjs('\n          if (document.body.classList.contains(\"dark-mode\")) {\n            if (typeof applyDarkModeToTables === \"function\") {\n              applyDarkModeToTables();\n            }\n          }\n        ')\n      })\n    }\n  })\n  \n  observeEvent(input$date_range_end, {\n    if(user_data$is_authenticated && app_settings$theme == \"dark\") {\n      shinyjs::delay(100, {\n        shinyjs::runjs('\n          if (document.body.classList.contains(\"dark-mode\")) {\n            if (typeof applyDarkModeToTables === \"function\") {\n              applyDarkModeToTables();\n            }\n          }\n        ')\n      })\n    }\n  })\n  \n  # Update UI on tab changes\n  observeEvent(input$main_tabs, {\n    if(input$main_tabs == \"report\" && user_data$is_authenticated && app_settings$theme == \"dark\") {\n      shinyjs::delay(100, {\n        shinyjs::runjs('\n          if (document.body.classList.contains(\"dark-mode\")) {\n            if (typeof applyDarkModeToTables === \"function\") {\n              applyDarkModeToTables();\n            }\n          }\n        ')\n      })\n    }\n  })\n  \n  # Observe expense filter changes\n  observeEvent(input$expense_filter, {\n    if(user_data$is_authenticated && app_settings$theme == \"dark\") {\n      shinyjs::delay(100, {\n        shinyjs::runjs('\n          if (document.body.classList.contains(\"dark-mode\")) {\n            if (typeof applyDarkModeToTables === \"function\") {\n              applyDarkModeToTables();\n            }\n          }\n        ')\n      })\n    }\n  })\n  \n  # Update expense list when currency changes\n  observeEvent(app_settings$currency, {\n    if (user_data$is_authenticated) {\n      # This will force the expense list to redraw with the new currency\n      output$expense_list <- renderUI({\n        expense_list_content()\n      })\n      \n      # If in dark mode, reapply table styling after currency update\n      if(app_settings$theme == \"dark\") {\n        shinyjs::delay(100, {\n          shinyjs::runjs('\n            if (document.body.classList.contains(\"dark-mode\")) {\n              if (typeof applyDarkModeToTables === \"function\") {\n                applyDarkModeToTables();\n              }\n            }\n          ')\n        })\n      }\n    }\n  })\n  \n  # Logout handler\n  observeEvent(input$logout_btn, {\n    # Reset user data\n    user_data$user_id <- NULL\n    user_data$username <- NULL\n    user_data$display_name <- NULL\n    user_data$is_authenticated <- FALSE\n    \n    # Show login, hide panels\n    shinyjs::show(\"login-panel\")\n    shinyjs::hide(\"app-content\")\n    shinyjs::hide(\"settings-panel\")\n    \n    # Show logout message with shinyalert\n    shinyalert(\n      title = \"Logged Out\",\n      text = \"You have been logged out successfully.\",\n      type = \"info\",\n      timer = 2000,\n      showConfirmButton = FALSE\n    )\n  })\n  \n  # File upload preview logic\n  output$upload_preview_ui <- renderUI({\n    req(input$upload_expenses)\n    \n    # Try to read the CSV file\n    tryCatch({\n      # Read the uploaded file\n      df <- read.csv(input$upload_expenses$datapath, stringsAsFactors = FALSE)\n      \n      # Check if required columns exist\n      required_cols <- c(\"date\", \"item_name\", \"amount\", \"category\")\n      missing_cols <- required_cols[!required_cols %in% colnames(df)]\n      \n      if (length(missing_cols) > 0) {\n        return(div(\n          class = \"alert alert-danger\",\n          h5(\"Error: Missing Columns\"),\n          p(\"The following required columns are missing:\"),\n          tags$ul(\n            lapply(missing_cols, function(col) {\n              tags$li(col)\n            })\n          )\n        ))\n      }\n      \n      # Validate data types\n      validation_errors <- c()\n      \n      # Check date format\n      invalid_dates <- which(!grepl(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\", df$date))\n      if (length(invalid_dates) > 0) {\n        validation_errors <- c(validation_errors, \n                               sprintf(\"Invalid date format in rows: %s. Use YYYY-MM-DD format.\", \n                                       paste(invalid_dates[1:min(length(invalid_dates), 5)], collapse = \", \")))\n      }\n      \n      # Check amount is numeric\n      if (!is.numeric(df$amount)) {\n        df$amount <- as.numeric(df$amount)\n        invalid_amounts <- which(is.na(df$amount))\n        if (length(invalid_amounts) > 0) {\n          validation_errors <- c(validation_errors, \n                                 sprintf(\"Invalid amount values in rows: %s. Use numeric values.\", \n                                         paste(invalid_amounts[1:min(length(invalid_amounts), 5)], collapse = \", \")))\n        }\n      }\n      \n      # Check category is valid\n      invalid_categories <- which(!df$category %in% expense_categories)\n      if (length(invalid_categories) > 0) {\n        validation_errors <- c(validation_errors, \n                               sprintf(\"Invalid categories in rows: %s. Categories must be one of: %s\", \n                                       paste(invalid_categories[1:min(length(invalid_categories), 5)], collapse = \", \"),\n                                       paste(expense_categories, collapse = \", \")))\n      }\n      \n      # If validation errors exist, show them\n      if (length(validation_errors) > 0) {\n        return(div(\n          class = \"alert alert-danger\",\n          h5(\"Validation Errors:\"),\n          tags$ul(\n            lapply(validation_errors, function(error) {\n              tags$li(error)\n            })\n          )\n        ))\n      }\n      \n      # Show preview table\n      preview_rows <- min(nrow(df), 5)  # Preview first 5 rows\n      \n      # Format the preview data\n      preview_df <- df[1:preview_rows, ]\n      \n      # Make the import button visible\n      shinyjs::show(\"import_button_container\")\n      \n      div(\n        class = \"upload-preview\",\n        h5(sprintf(\"Preview (showing %d of %d rows):\", preview_rows, nrow(df))),\n        div(style = \"overflow-x: auto;\",\n            tableOutput(\"upload_preview_table\")\n        ),\n        p(sprintf(\"Total records to import: %d\", nrow(df))),\n        div(\n          class = \"alert alert-success\",\n          \"Data looks good! Click 'Import Expenses' to add these records to your account.\"\n        )\n      )\n      \n    }, error = function(e) {\n      # Hide the import button\n      shinyjs::hide(\"import_button_container\")\n      \n      div(\n        class = \"alert alert-danger\",\n        h5(\"Error Reading File\"),\n        p(\"There was an error reading your CSV file:\"),\n        p(e$message),\n        p(\"Please make sure your file is a properly formatted CSV file.\")\n      )\n    })\n  })\n  \n  # Preview table output\n  output$upload_preview_table <- renderTable({\n    req(input$upload_expenses)\n    \n    # Try to read the CSV file\n    df <- read.csv(input$upload_expenses$datapath, stringsAsFactors = FALSE)\n    \n    # Preview first 5 rows\n    preview_rows <- min(nrow(df), 5)\n    preview_df <- df[1:preview_rows, ]\n    \n    preview_df\n  }, striped = TRUE, bordered = TRUE, align = \"l\")\n  \n  # Import expenses button handler\n  observeEvent(input$import_expenses_btn, {\n    req(input$upload_expenses, user_data$user_id)\n    \n    # Read the uploaded file\n    df <- tryCatch({\n      read.csv(input$upload_expenses$datapath, stringsAsFactors = FALSE)\n    }, error = function(e) {\n      shinyalert(\n        title = \"Import Error\",\n        text = paste(\"Error reading CSV file:\", e$message),\n        type = \"error\"\n      )\n      return(NULL)\n    })\n    \n    if (is.null(df)) return()\n    \n    # Perform validation again (redundant but safer)\n    required_cols <- c(\"date\", \"item_name\", \"amount\", \"category\")\n    if (!all(required_cols %in% colnames(df))) {\n      shinyalert(\n        title = \"Import Error\",\n        text = \"Required columns are missing from the CSV file.\",\n        type = \"error\"\n      )\n      return()\n    }\n    \n    # Prepare data for import\n    import_data <- data.frame(\n      user_id = user_data$user_id,\n      date = as.character(df$date),\n      item_name = as.character(df$item_name),\n      amount = as.numeric(df$amount),\n      category = as.character(df$category),\n      stringsAsFactors = FALSE\n    )\n    \n    # Count successful and failed imports\n    success_count <- 0\n    failed_count <- 0\n    error_messages <- c()\n    \n    # Process each row\n    for (i in 1:nrow(import_data)) {\n      tryCatch({\n        # Validate this row\n        if (is.na(import_data$amount[i]) || \n            !import_data$category[i] %in% expense_categories ||\n            !grepl(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\", import_data$date[i])) {\n          failed_count <- failed_count + 1\n          error_messages <- c(error_messages, sprintf(\"Row %d: Invalid data\", i))\n          next\n        }\n        \n        # Insert the expense\n        query <- sprintf(\n          \"INSERT INTO expenses (user_id, date, item_name, amount, category) VALUES (%d, '%s', '%s', %.2f, '%s')\",\n          import_data$user_id[i],\n          import_data$date[i],\n          gsub(\"'\", \"''\", import_data$item_name[i]),  # Escape single quotes\n          import_data$amount[i],\n          import_data$category[i]\n        )\n        \n        dbExecute(con, query)\n        success_count <- success_count + 1\n        \n      }, error = function(e) {\n        failed_count <- failed_count + 1\n        error_messages <- c(error_messages, sprintf(\"Row %d: %s\", i, e$message))\n      })\n    }\n    \n    # Increment the update counter to trigger UI refresh\n    expense_tracker$update_counter <- expense_tracker$update_counter + 1\n    \n    # Show result message\n    if (failed_count == 0) {\n      shinyalert(\n        title = \"Import Successful\",\n        text = sprintf(\"Successfully imported %d expense records.\", success_count),\n        type = \"success\"\n      )\n    } else {\n      error_text <- if (length(error_messages) > 3) {\n        paste0(paste(error_messages[1:3], collapse = \"\\n\"), \"\\n...(more errors)\")\n      } else {\n        paste(error_messages, collapse = \"\\n\")\n      }\n      \n      shinyalert(\n        title = \"Import Partially Successful\",\n        text = sprintf(\"Imported %d records successfully. %d records failed.\\n\\nErrors:\\n%s\", \n                       success_count, failed_count, error_text),\n        type = \"warning\"\n      )\n    }\n    \n    # Reset the file input\n    reset(\"upload_expenses\")\n    shinyjs::hide(\"import_button_container\")\n  })\n  \n  # Add these functions to handle text area input\n  # Preview text data button handler\n  observeEvent(input$preview_text_data_btn, {\n    # Get the text area content\n    text_data <- input$expense_text_data\n    \n    # Check if text is empty\n    if (is.null(text_data) || text_data == \"\") {\n      output$text_preview_ui <- renderUI({\n        div(\n          class = \"alert alert-warning\",\n          \"Please enter some data in the text area.\"\n        )\n      })\n      shinyjs::hide(\"import_text_button_container\")\n      return()\n    }\n    \n    # Try to parse the text as CSV\n    tryCatch({\n      # Split the text into lines\n      lines <- strsplit(text_data, \"\\\\r?\\\\n\")[[1]]\n      lines <- lines[lines != \"\"] # Remove empty lines\n      \n      if (length(lines) == 0) {\n        output$text_preview_ui <- renderUI({\n          div(\n            class = \"alert alert-warning\",\n            \"No data found. Please enter data in CSV format.\"\n          )\n        })\n        shinyjs::hide(\"import_text_button_container\")\n        return()\n      }\n      \n      # Check if the header row exists and add it if not\n      if (!grepl(\"date\", tolower(lines[1]))) {\n        # Add header row\n        lines <- c(\"date,item_name,amount,category\", lines)\n      }\n      \n      # Combine lines back to text\n      csv_text <- paste(lines, collapse = \"\\n\")\n      \n      # Parse the CSV text\n      con <- textConnection(csv_text)\n      df <- read.csv(con, stringsAsFactors = FALSE)\n      close(con)\n      \n      # Check if required columns exist\n      required_cols <- c(\"date\", \"item_name\", \"amount\", \"category\")\n      missing_cols <- required_cols[!required_cols %in% colnames(df)]\n      \n      if (length(missing_cols) > 0) {\n        output$text_preview_ui <- renderUI({\n          div(\n            class = \"alert alert-danger\",\n            h5(\"Error: Missing Columns\"),\n            p(\"The following required columns are missing:\"),\n            tags$ul(\n              lapply(missing_cols, function(col) {\n                tags$li(col)\n              })\n            ),\n            p(\"Make sure your data has these columns or add a header row.\")\n          )\n        })\n        shinyjs::hide(\"import_text_button_container\")\n        return()\n      }\n      \n      # Validate data types\n      validation_errors <- c()\n      \n      # Check date format\n      invalid_dates <- which(!grepl(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\", df$date))\n      if (length(invalid_dates) > 0) {\n        validation_errors <- c(validation_errors, \n                               sprintf(\"Invalid date format in rows: %s. Use YYYY-MM-DD format.\", \n                                       paste(invalid_dates[1:min(length(invalid_dates), 5)], collapse = \", \")))\n      }\n      \n      # Check amount is numeric\n      if (!is.numeric(df$amount)) {\n        df$amount <- as.numeric(df$amount)\n        invalid_amounts <- which(is.na(df$amount))\n        if (length(invalid_amounts) > 0) {\n          validation_errors <- c(validation_errors, \n                                 sprintf(\"Invalid amount values in rows: %s. Use numeric values.\", \n                                         paste(invalid_amounts[1:min(length(invalid_amounts), 5)], collapse = \", \")))\n        }\n      }\n      \n      # Check category is valid\n      invalid_categories <- which(!df$category %in% expense_categories)\n      if (length(invalid_categories) > 0) {\n        validation_errors <- c(validation_errors, \n                               sprintf(\"Invalid categories in rows: %s. Categories must be one of: %s\", \n                                       paste(invalid_categories[1:min(length(invalid_categories), 5)], collapse = \", \"),\n                                       paste(expense_categories, collapse = \", \")))\n      }\n      \n      # If validation errors exist, show them\n      if (length(validation_errors) > 0) {\n        output$text_preview_ui <- renderUI({\n          div(\n            class = \"alert alert-danger\",\n            h5(\"Validation Errors:\"),\n            tags$ul(\n              lapply(validation_errors, function(error) {\n                tags$li(error)\n              })\n            )\n          )\n        })\n        shinyjs::hide(\"import_text_button_container\")\n        return()\n      }\n      \n      # Store data in a reactive value for later use\n      text_import_data <- reactiveVal(df)\n      \n      # Show preview table\n      preview_rows <- min(nrow(df), 5)  # Preview first 5 rows\n      \n      # Format the preview data\n      preview_df <- df[1:preview_rows, ]\n      \n      # Make the import button visible\n      shinyjs::show(\"import_text_button_container\")\n      \n      output$text_preview_ui <- renderUI({\n        div(\n          class = \"upload-preview\",\n          h5(sprintf(\"Preview (showing %d of %d rows):\", preview_rows, nrow(df))),\n          div(style = \"overflow-x: auto;\",\n              renderTable({\n                preview_df\n              }, striped = TRUE, bordered = TRUE, align = \"l\")  # Use \"l\" instead of \"left\"\n          ),\n          p(sprintf(\"Total records to import: %d\", nrow(df))),\n          div(\n            class = \"alert alert-success\",\n            \"Data looks good! Click 'Import Text Data' to add these records to your account.\"\n          )\n        )\n      })\n      \n    }, error = function(e) {\n      # Hide the import button\n      shinyjs::hide(\"import_text_button_container\")\n      \n      output$text_preview_ui <- renderUI({\n        div(\n          class = \"alert alert-danger\",\n          h5(\"Error Parsing Data\"),\n          p(\"There was an error parsing your data:\"),\n          p(e$message),\n          p(\"Please make sure your data is in proper CSV format.\")\n        )\n      })\n    })\n  })\n  \n  # Import text data button handler\n  observeEvent(input$import_text_expenses_btn, {\n    req(user_data$user_id)\n    \n    # Get the stored parsed data\n    df <- parsed_text_data()\n    \n    # Check if we have data to import\n    if (is.null(df) || nrow(df) == 0) {\n      # Print debug message\n      cat(\"No data available for import\\n\")\n      \n      shinyalert(\n        title = \"Import Error\",\n        text = \"No data available for import. Please preview your data first.\",\n        type = \"error\"\n      )\n      return()\n    }\n    \n    # Print debug info\n    cat(\"Importing data with\", nrow(df), \"rows\\n\")\n    print(head(df))\n    \n    # Prepare data for import\n    import_data <- data.frame(\n      user_id = user_data$user_id,\n      date = as.character(df$date),\n      item_name = as.character(df$item_name),\n      amount = as.numeric(df$amount),\n      category = as.character(df$category),\n      stringsAsFactors = FALSE\n    )\n    \n    # Count successful and failed imports\n    success_count <- 0\n    failed_count <- 0\n    error_messages <- c()\n    \n    # Process each row\n    for (i in 1:nrow(import_data)) {\n      tryCatch({\n        # Debug info\n        cat(\"Processing row\", i, \":\", \n            import_data$date[i], \n            import_data$item_name[i], \n            import_data$amount[i], \n            import_data$category[i], \"\\n\")\n        \n        # Validate this row\n        if (is.na(import_data$amount[i]) || \n            !import_data$category[i] %in% expense_categories ||\n            !grepl(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\", import_data$date[i])) {\n          failed_count <- failed_count + 1\n          error_messages <- c(error_messages, sprintf(\"Row %d: Invalid data\", i))\n          cat(\"Row\", i, \"validation failed\\n\")\n          next\n        }\n        \n        # Insert the expense\n        query <- sprintf(\n          \"INSERT INTO expenses (user_id, date, item_name, amount, category) VALUES (%d, '%s', '%s', %.2f, '%s')\",\n          import_data$user_id[i],\n          import_data$date[i],\n          gsub(\"'\", \"''\", import_data$item_name[i]),  # Escape single quotes\n          import_data$amount[i],\n          import_data$category[i]\n        )\n        \n        # Debug info\n        cat(\"Executing query:\", query, \"\\n\")\n        \n        dbExecute(con, query)\n        success_count <- success_count + 1\n        cat(\"Row\", i, \"imported successfully\\n\")\n        \n      }, error = function(e) {\n        failed_count <- failed_count + 1\n        error_messages <- c(error_messages, sprintf(\"Row %d: %s\", i, e$message))\n        cat(\"Error importing row\", i, \":\", e$message, \"\\n\")\n      })\n    }\n    \n    cat(\"Import complete. Success:\", success_count, \"Failed:\", failed_count, \"\\n\")\n    \n    # Increment the update counter to trigger UI refresh\n    expense_tracker$update_counter <- expense_tracker$update_counter + 1\n    \n    # Show result message\n    if (failed_count == 0 && success_count > 0) {\n      shinyalert(\n        title = \"Import Successful\",\n        text = sprintf(\"Successfully imported %d expense records.\", success_count),\n        type = \"success\"\n      )\n    } else if (success_count > 0) {\n      error_text <- if (length(error_messages) > 3) {\n        paste0(paste(error_messages[1:3], collapse = \"\\n\"), \"\\n...(more errors)\")\n      } else {\n        paste(error_messages, collapse = \"\\n\")\n      }\n      \n      shinyalert(\n        title = \"Import Partially Successful\",\n        text = sprintf(\"Imported %d records successfully. %d records failed.\\n\\nErrors:\\n%s\", \n                       success_count, failed_count, error_text),\n        type = \"warning\"\n      )\n    } else {\n      error_text <- if (length(error_messages) > 3) {\n        paste0(paste(error_messages[1:3], collapse = \"\\n\"), \"\\n...(more errors)\")\n      } else {\n        paste(error_messages, collapse = \"\\n\")\n      }\n      \n      shinyalert(\n        title = \"Import Failed\",\n        text = sprintf(\"Failed to import any records.\\n\\nErrors:\\n%s\", error_text),\n        type = \"error\"\n      )\n    }\n    \n    # Clear the text area and hide the import button\n    updateTextAreaInput(session, \"expense_text_data\", value = \"\")\n    output$text_preview_ui <- renderUI({})\n    shinyjs::hide(\"import_text_button_container\")\n    parsed_text_data(NULL)  # Clear stored data\n  })\n}","type":"text"},{"name":"ui.R","content":"# ui.R - User interface definition for Budget Tracker app\n\nui <- fluidPage(\n  title = \"Budget Tracker\",\n  \n  # Use shinyjs and shinyalert (force=TRUE per warning message)\n  shinyjs::useShinyjs(),\n  shinyalert::useShinyalert(force = TRUE),\n  \n  # Include external CSS and JavaScript files\n  tags$head(\n    tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"styles.css\"),\n    tags$script(src = \"scripts.js\")\n  ),\n  \n  # User authentication\n  # Login form\n  div(\n    id = \"login-panel\",\n    div(class = \"card\",\n        h1(\"Budget Tracker\", style = \"text-align: center;\"),\n        \n        # Wrap in a form tag to better handle Enter key submissions\n        tags$form(\n          id = \"login-form\", \n          onsubmit = \"return false;\", # Prevent default form submission\n          \n          # Custom login form\n          textInput(inputId = \"username\", label = \"Username\", placeholder = \"Enter username\", width = \"100%\"),\n          passwordInput(inputId = \"password\", label = \"Password\", placeholder = \"Enter password\", width = \"100%\"),\n          actionButton(inputId = \"login_btn\", label = \"Login\", class = \"btn-primary btn-block\"),\n        ),\n        \n        br(),\n        actionButton(inputId = \"register_btn\", label = \"Create a New Account\", class = \"btn-outline-secondary btn-block\")\n    )\n  ),\n  \n  # Hidden registration form\n  shinyjs::hidden(\n    div(\n      id = \"register-panel\",\n      div(class = \"card\",\n          h1(\"Create Account\", style = \"text-align: center;\"),\n          textInput(inputId = \"new_username\", label = \"Username\", placeholder = \"Choose a username\", width = \"100%\"),\n          passwordInput(inputId = \"new_password\", label = \"Password\", placeholder = \"Choose a password\", width = \"100%\"),\n          textInput(inputId = \"new_display_name\", label = \"Your Name\", placeholder = \"How should we call you?\", width = \"100%\"),\n          actionButton(inputId = \"create_account_btn\", label = \"Create Account\", class = \"btn-success btn-block\"),\n          actionButton(inputId = \"back_to_login_btn\", label = \"Back to Login\", class = \"btn-outline-primary btn-block\")\n      )\n    )\n  ),\n  \n  # Hidden edit expense modal\n  shinyjs::hidden(\n    div(\n      id = \"edit-expense-modal\",\n      class = \"modal\",\n      style = \"display: none; position: fixed; z-index: 2000; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.4);\",\n      div(\n        class = \"modal-content card\",\n        style = \"background-color: #fefefe; margin: 15% auto; padding: 20px; border: 1px solid #888; width: 80%; max-width: 500px;\",\n        div(\n          style = \"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\",\n          h3(\"Edit Expense\", id = \"edit-expense-title\"),\n          actionButton(inputId = \"close_edit_modal_btn\", label = NULL, icon = icon(\"times\"), class = \"btn-sm\")\n        ),\n        # Hidden expense ID using div with hidden style (Shiny-compatible approach)\n        div(style = \"display: none;\",\n            textInput(inputId = \"edit_expense_id\", label = NULL, value = \"\")\n        ),\n        dateInput(inputId = \"edit_expense_date\", label = \"Date\", value = Sys.Date(), width = \"100%\"),\n        textInput(inputId = \"edit_expense_name\", label = \"Description\", placeholder = \"What did you spend on?\", width = \"100%\"),\n        numericInput(inputId = \"edit_expense_amount\", label = \"Amount\", value = 0, min = 0, max = 99999.99, step = 0.01, width = \"100%\"),\n        selectInput(inputId = \"edit_expense_category\", label = \"Category\", choices = expense_categories, width = \"100%\"),\n        div(\n          style = \"text-align: right; margin-top: 20px;\",\n          actionButton(inputId = \"cancel_edit_btn\", label = \"Cancel\", class = \"btn-secondary\", style = \"margin-right: 10px;\"),\n          actionButton(inputId = \"save_edit_btn\", label = \"Save Changes\", class = \"btn-success\")\n        )\n      )\n    )\n  ),\n  \n  # Hidden settings page\n  shinyjs::hidden(\n    div(\n      id = \"settings-panel\",\n      div(class = \"navbar\",\n          h3(\"Settings\"),\n          div(class = \"nav-buttons\",\n              actionButton(inputId = \"close_settings_btn\", label = \"Back\", icon = icon(\"arrow-left\"), class = \"btn-sm btn-secondary\")\n          )\n      ),\n      div(class = \"container mt-4\",\n          div(class = \"row justify-content-center\",\n              div(class = \"col-md-6 col-sm-12\",\n                  tabsetPanel(\n                    id = \"settings_tabs\",\n                    \n                    # User Settings Tab\n                    tabPanel(\n                      title = \"User Settings\",\n                      value = \"user\",\n                      width = \"100%\",\n                      div(class = \"card p-3\",\n                          h4(\"Profile Settings\"),\n                          textInput(inputId = \"change_display_name\", label = \"Display Name\", placeholder = \"Your name\", width = \"100%\"),\n                          textInput(inputId = \"view_username\", label = \"Username\", placeholder = \"Username\", width = \"100%\"),\n                          passwordInput(inputId = \"change_password\", label = \"New Password\", placeholder = \"Leave blank to keep current\", width = \"100%\"),\n                          # Spending Limit Settings\n                          h4(\"Spending Limit\", style = \"margin-top: 20px;\"),\n                          numericInput(inputId = \"spending_limit\", label = \"Spending Limit (Â£)\", \n                                       value = 1000, min = 0, step = 10, width = \"100%\"),\n                          selectInput(inputId = \"limit_period\", label = \"Limit Period\", \n                                      choices = c(\"Monthly\" = \"monthly\", \"Weekly\" = \"weekly\"), \n                                      selected = \"monthly\", width = \"100%\"),\n                          hr(),\n                          actionButton(inputId = \"save_settings_btn\", label = \"Save Changes\", class = \"btn-success btn-block mt-3\"),\n                          \n                          # Add Danger Zone with Remove Account button\n                          div(class = \"danger-zone\",\n                              h4(\"Danger Zone\"),\n                              p(\"This action cannot be undone. This will permanently delete your account and all associated data.\"),\n                              actionButton(inputId = \"remove_account_btn\", \n                                           label = \"Remove My Account\", \n                                           icon = icon(\"trash\"),\n                                           class = \"btn-danger btn-block mt-3\")\n                          )\n                      )\n                    ),\n                    \n                    # Appearance Tab\n                    tabPanel(\n                      title = \"Appearance\",\n                      value = \"appearance\",\n                      width = \"100%\",\n                      div(class = \"card p-3\",\n                          h4(\"Appearance Settings\"),\n                          selectInput(inputId = \"select_theme\", label = \"Theme\", \n                                      choices = c(\"Light\" = \"light\", \"Dark\" = \"dark\"), \n                                      selected = \"light\", width = \"100%\"),\n                          selectInput(inputId = \"select_font\", label = \"Font\", \n                                      choices = fonts,\n                                      selected = \"Arial\", width = \"100%\"),\n                          selectInput(inputId = \"select_currency\", label = \"Currency\", \n                                      choices = currencies,\n                                      selected = \"GBP\", width = \"100%\"),\n                          hr(),\n                          actionButton(inputId = \"save_settings_btn\", label = \"Save Changes\", class = \"btn-success btn-block mt-3\")\n                      )\n                    ),\n                    \n                    # Import Data Tab\n                    tabPanel(\n                      title = \"Import Data\",\n                      value = \"import\",\n                      width = \"100%\",\n                      div(class = \"card p-3\",\n                          h4(\"Import Expenses\"),\n                          p(\"Upload your expense data in CSV format to bulk import expenses.\"),\n                          \n                          # Format instructions\n                          div(class = \"format-instructions\",\n                              h5(\"File Format Requirements:\"),\n                              p(\"Your CSV file should have the following columns:\"),\n                              tags$ul(\n                                tags$li(strong(\"date\"), \" - Date of expense (YYYY-MM-DD format)\"),\n                                tags$li(strong(\"item_name\"), \" - Description of what you spent on\"),\n                                tags$li(strong(\"amount\"), \" - Amount spent (numeric value only)\"),\n                                tags$li(strong(\"category\"), \" - Category of expense (must match one of the app's categories)\")\n                              ),\n                              p(\"Example:\"),\n                              pre(\n                                style = \"background-color: #f8f9fa; padding: 10px; border-radius: 4px; overflow-x: auto;\",\n                                \"date,item_name,amount,category\\n2025-03-20,Groceries,42.50,Supermarket\\n2025-03-21,Bus ticket,3.75,Transport\"\n                              ),\n                              div(\n                                class = \"alert alert-info\",\n                                style = \"margin-top: 10px;\",\n                                HTML(\"<strong>Available Categories:<\/strong> \", paste(expense_categories, collapse = \", \"))\n                              )\n                          ),\n                          \n                          # File input\n                          fileInput(\"upload_expenses\", \"Choose CSV File\",\n                                    accept = c(\n                                      \"text/csv\",\n                                      \"text/comma-separated-values,text/plain\",\n                                      \".csv\"\n                                    )),\n                          \n                          # Preview and import section for file upload\n                          uiOutput(\"upload_preview_ui\"),\n                          \n                          # Initially hidden import button for file upload\n                          div(\n                            id = \"import_button_container\",\n                            style = \"display: none;\",\n                            actionButton(\"import_expenses_btn\", \"Import Expenses\", class = \"btn-success btn-block mt-3\")\n                          ),\n                          \n                          # Text area import section\n                          hr(),\n                          h4(\"Or Paste Data Directly\"),\n                          p(\"You can also paste your expense data directly in CSV format below:\"),\n                          \n                          # Example for text input\n                          div(class = \"format-instructions\",\n                              p(\"Each line should contain date, description, amount, and category separated by commas:\"),\n                              pre(\n                                style = \"background-color: #f8f9fa; padding: 10px; border-radius: 4px; overflow-x: auto;\",\n                                \"2025-03-20,Groceries,42.50,Supermarket\\n2025-03-21,Bus ticket,3.75,Transport\"\n                              )\n                          ),\n                          \n                          # Text area input\n                          tags$textarea(\n                            id = \"expense_text_data\",\n                            class = \"form-control\",\n                            rows = 8,\n                            placeholder = \"Paste your data here in CSV format (date,description,amount,category)...\",\n                            style = \"width: 100%; font-family: monospace;\"\n                          ),\n                          \n                          # Preview button for text input\n                          div(\n                            style = \"margin-top: 10px;\",\n                            actionButton(\"preview_text_data_btn\", \"Preview Data\", class = \"btn-primary\")\n                          ),\n                          \n                          # Preview and import section for text input\n                          uiOutput(\"text_preview_ui\"),\n                          \n                          # Initially hidden import button for text data\n                          div(\n                            id = \"import_text_button_container\",\n                            style = \"display: none;\",\n                            actionButton(\"import_text_expenses_btn\", \"Import Text Data\", class = \"btn-success btn-block mt-3\")\n                          )\n                      )\n                    ),\n                    \n                    # Log Tab\n                    tabPanel(\n                      title = \"Log\",\n                      value = \"log\",\n                      width = \"100%\",\n                      div(class = \"card p-3\",\n                          h4(\"Log\"),\n                          hr(),\n                          p(\"26 Mar 25: Adding importing data feature.\"),\n                          p(\"25 Mar 25: Adding User's budget limit.\"), \n                          p(\"24 Mar 25: Initial commit.\")\n                      )\n                    )\n                  )\n              )\n          )\n      )\n    )\n  ),\n  \n  # Main application (shown after login)\n  shinyjs::hidden(\n    div(\n      id = \"app-content\",\n      \n      # Navigation bar\n      div(class = \"navbar\",\n          h3(textOutput(\"navbar_title\")),\n          div(class = \"nav-buttons\",\n              actionButton(inputId = \"show_settings_btn\", label = \"Settings\", icon = icon(\"cog\"), class = \"btn-sm btn-light mr-2\"),\n              actionButton(inputId = \"logout_btn\", label = \"Logout\", icon = icon(\"sign-out-alt\"), class = \"btn-sm btn-danger\")\n          )\n      ),\n      \n      # Tabs\n      tabsetPanel(\n        id = \"main_tabs\",\n        \n        # Home Tab\n        tabPanel(\n          title = \"Home\",\n          value = \"home\",\n          icon = icon(\"home\"),\n          \n          div(class = \"welcome-message\",\n              h3(textOutput(\"welcome_message\"))\n          ),\n          \n          div(class = \"card\",\n              h3(\"Add Expense\"),\n              dateInput(inputId = \"expense_date\", label = \"Date\", value = Sys.Date(), width = \"100%\"),\n              textInput(inputId = \"expense_name\", label = \"Description\", placeholder = \"What did you spend on?\", width = \"100%\"),\n              numericInput(inputId = \"expense_amount\", label = \"Amount (Â£)\", value = 0, min = 0, max = 99999.99, step = 0.01, width = \"100%\"),\n              selectInput(inputId = \"expense_category\", label = \"Category\", choices = expense_categories, width = \"100%\"),\n              actionButton(inputId = \"add_expense_btn\", label = \"Save Expense\", class = \"btn-success btn-block\")\n          )\n        ),\n        \n        # Report Tab\n        tabPanel(\n          title = \"Report\",\n          value = \"report\",\n          icon = icon(\"list\"),\n          \n          # Budget Progress Card\n          div(class = \"card\",\n              h3(\"Budget Progress\"),\n              uiOutput(\"budget_progress\")\n          ),\n          \n          div(class = \"card\",\n              h3(\"Expenses Period\"),\n              \n              # Date range filter (using two separate date inputs)\n              div(\n                style = \"display: flex; justify-content: space-between;\",\n                div(style = \"width: 48%;\", dateInput(inputId = \"date_range_start\", label = \"From\", value = Sys.Date() - 30, width = \"100%\")),\n                div(style = \"width: 48%;\", dateInput(inputId = \"date_range_end\", label = \"To\", value = Sys.Date(), width = \"100%\"))\n              ),\n          ),\n          \n          div(class = \"card\",\n              h3(\"Expense Distribution\"),\n              # Add a container for the donut chart\n              echarts4rOutput(outputId = \"expense_donut_chart\", height = \"400px\")\n          ),\n          \n          div(class = \"card\",\n              h3(\"Recent Expenses\"),\n              selectInput(inputId = \"expense_filter\", label = \"Filter by category\", choices = expense_categories, \n                          multiple = TRUE, selectize = TRUE, width = \"100%\"),\n              \n              # Export options\n              div(class = \"export-container\",\n                  div(class = \"export-format-select\",\n                      selectInput(\n                        inputId = \"export_format\",\n                        label = \"Export as:\",\n                        choices = c(\n                          \"CSV (.csv)\" = \"csv\",\n                          \"Excel (.xlsx)\" = \"xlsx\",\n                          \"Tab Delimited (.txt)\" = \"txt\",\n                          \"JSON (.json)\" = \"json\"\n                        ),\n                        selected = \"csv\",\n                        width = \"auto\"\n                      )\n                  ),\n                  downloadButton(\n                    outputId = \"download_expenses\",\n                    label = \"Export\",\n                    class = \"btn-primary\"\n                  )\n              ),\n              \n              uiOutput(\"expense_list\")\n          )\n        )\n      )\n    )\n  )\n)","type":"text"},{"name":"db.R","content":"# db.R - Database setup and functions for the Budget Tracker app\n\n# Set up database connection\nsetup_db <- function() {\n  # Create a connection to SQLite database\n  con <- dbConnect(RSQLite::SQLite(), \"budget_tracker.db\")\n  \n  # Create users table if it doesn't exist\n  if (!dbExistsTable(con, \"users\")) {\n    dbExecute(con, \"\n      CREATE TABLE users (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        username TEXT UNIQUE NOT NULL,\n        password TEXT NOT NULL,\n        display_name TEXT NOT NULL,\n        theme TEXT DEFAULT 'light',\n        font TEXT DEFAULT 'Arial',\n        currency TEXT DEFAULT 'GBP',\n        spending_limit NUMERIC DEFAULT 1000,\n        limit_period TEXT DEFAULT 'monthly',\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      )\n    \")\n    # Add a test user\n    dbExecute(con, \"\n      INSERT INTO users (username, password, display_name)\n      VALUES ('test', 'password', 'Test User')\n    \")\n  } else {\n    # Check if columns exist, add them if they don't\n    user_columns <- dbListFields(con, \"users\")\n    if (!\"theme\" %in% user_columns) {\n      dbExecute(con, \"ALTER TABLE users ADD COLUMN theme TEXT DEFAULT 'light'\")\n    }\n    if (!\"font\" %in% user_columns) {\n      dbExecute(con, \"ALTER TABLE users ADD COLUMN font TEXT DEFAULT 'Arial'\")\n    }\n    if (!\"currency\" %in% user_columns) {\n      dbExecute(con, \"ALTER TABLE users ADD COLUMN currency TEXT DEFAULT 'GBP'\")\n    }\n    # Add new columns for spending limit feature\n    if (!\"spending_limit\" %in% user_columns) {\n      dbExecute(con, \"ALTER TABLE users ADD COLUMN spending_limit NUMERIC DEFAULT 1000\")\n    }\n    if (!\"limit_period\" %in% user_columns) {\n      dbExecute(con, \"ALTER TABLE users ADD COLUMN limit_period TEXT DEFAULT 'monthly'\")\n    }\n  }\n  \n  # Create expenses table if it doesn't exist\n  if (!dbExistsTable(con, \"expenses\")) {\n    dbExecute(con, \"\n      CREATE TABLE expenses (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        user_id INTEGER NOT NULL,\n        date DATE NOT NULL,\n        item_name TEXT NOT NULL,\n        amount NUMERIC NOT NULL,\n        category TEXT NOT NULL,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (user_id) REFERENCES users(id)\n      )\n    \")\n  }\n  \n  return(con)\n}","type":"text"},{"name":"global.R","content":"# global.R - Global variables, constants, and libraries for the Budget Tracker app\n\n# Load required libraries\nlibrary(shiny)\nlibrary(DBI)\nlibrary(RSQLite)\nlibrary(shinyjs)\nlibrary(shinyalert)  # For pop-up messages\nlibrary(writexl)     # For Excel exports\nlibrary(echarts4r)   # For donut chart\n\n# Source other files in the correct order, ensuring functions are available globally\nsource(\"helpers.R\", local = FALSE)\nsource(\"db.R\", local = FALSE)\n\n# Initialize available fonts\nfonts <- c(\n  \"Arial\" = \"Arial\",\n  \"Helvetica\" = \"Helvetica\",\n  \"Verdana\" = \"Verdana\", \n  \"Trebuchet MS\" = \"Trebuchet MS\",\n  \"Times New Roman\" = \"Times New Roman\",\n  \"Georgia\" = \"Georgia\",\n  \"SF Pro (iOS)\" = \"SF Pro Text, -apple-system\",\n  \"San Francisco (iOS)\" = \"-apple-system, BlinkMacSystemFont\",\n  \"Roboto (Android)\" = \"Roboto, sans-serif\"\n)\n\n# Initialize available currencies (alphabetical by code)\ncurrencies <- c(\n  \"Australian Dollar (A$)\" = \"AUD\",\n  \"Bulgarian Lev (Ð»Ð²)\" = \"BGN\",\n  \"Canadian Dollar (C$)\" = \"CAD\",\n  \"Swiss Franc (CHF)\" = \"CHF\",\n  \"Chinese Yuan (Â¥)\" = \"CNY\",\n  \"Czech Koruna (KÄ)\" = \"CZK\",\n  \"Danish Krone (kr)\" = \"DKK\",\n  \"Euro (â¬)\" = \"EUR\",\n  \"British Pound (Â£)\" = \"GBP\",\n  \"Hong Kong Dollar (HK$)\" = \"HKD\",\n  \"Croatian Kuna (kn)\" = \"HRK\",\n  \"Hungarian Forint (Ft)\" = \"HUF\",\n  \"Indian Rupee (â¹)\" = \"INR\",\n  \"Icelandic KrÃ³na (kr)\" = \"ISK\",\n  \"Japanese Yen (Â¥)\" = \"JPY\",\n  \"Norwegian Krone (kr)\" = \"NOK\",\n  \"Polish ZÅoty (zÅ)\" = \"PLN\",\n  \"Romanian Leu (lei)\" = \"RON\",\n  \"Swedish Krona (kr)\" = \"SEK\",\n  \"Ukrainian Hryvnia (â´)\" = \"UAH\",\n  \"US Dollar ($)\" = \"USD\"\n)\n\n# Currency symbols for display (alphabetical by code)\ncurrency_symbols <- c(\n  \"AUD\" = \"A$\",\n  \"BGN\" = \"Ð»Ð²\",\n  \"CAD\" = \"C$\",\n  \"CHF\" = \"CHF\",\n  \"CNY\" = \"Â¥\",\n  \"CZK\" = \"KÄ\",\n  \"DKK\" = \"kr\",\n  \"EUR\" = \"â¬\",\n  \"GBP\" = \"Â£\",\n  \"HKD\" = \"HK$\",\n  \"HRK\" = \"kn\",\n  \"HUF\" = \"Ft\",\n  \"INR\" = \"â¹\",\n  \"ISK\" = \"kr\",\n  \"JPY\" = \"Â¥\",\n  \"NOK\" = \"kr\",\n  \"PLN\" = \"zÅ\",\n  \"RON\" = \"lei\",\n  \"SEK\" = \"kr\",\n  \"UAH\" = \"â´\",\n  \"USD\" = \"$\"\n)\n\n# Define expense categories\nexpense_categories <- c('Bills', 'Cash', 'Cheque', 'Home & Property', 'Leisure', \n                        'Other', 'Personal', 'Personal Finance', 'Shopping', \n                        'Supermarket', 'Transport', 'Travel')","type":"text"},{"name":"helpers.R","content":"# helpers.R - Helper functions for the Budget Tracker app\n\n# Function to safely get currency symbol\nget_currency_symbol <- function(currency_code) {\n  if (is.null(currency_code) || currency_code == \"\" || \n      is.null(currency_symbols[[currency_code]]) || \n      length(currency_symbols[[currency_code]]) == 0) {\n    return(\"Â£\") # Default to pound if something goes wrong\n  }\n  return(currency_symbols[[currency_code]])\n}\n\n# Function to safely format amount with currency\nformat_currency <- function(amount, currency_code = \"GBP\") {\n  symbol <- get_currency_symbol(currency_code)\n  return(sprintf(\"%s%.2f\", symbol, amount))\n}\n\n# Helper function to get formatted date ranges\nget_period_range_text <- function(period_type) {\n  end_date <- Sys.Date()\n  \n  if(period_type == \"monthly\") {\n    # Calculate first and last day of current month\n    first_day <- as.Date(format(end_date, \"%Y-%m-01\"))\n    last_day <- as.Date(as.POSIXlt(as.numeric(as.POSIXlt(first_day)) + 32*24*60*60))\n    last_day <- as.Date(format(last_day, \"%Y-%m-01\")) - 1\n    \n    # Format as \"March 1-31, 2025\"\n    return(sprintf(\"%s %d-%d, %s\", \n                   format(first_day, \"%B\"),\n                   as.numeric(format(first_day, \"%d\")),\n                   as.numeric(format(last_day, \"%d\")),\n                   format(first_day, \"%Y\")))\n  } else if(period_type == \"weekly\") {\n    # Calculate first day of week (Monday)\n    days_since_monday <- as.numeric(format(end_date, \"%u\")) - 1\n    first_day <- end_date - days_since_monday\n    last_day <- first_day + 6  # Sunday\n    \n    # If month changes within the week, format as \"March 29-April 4, 2025\"\n    if(format(first_day, \"%B\") != format(last_day, \"%B\")) {\n      return(sprintf(\"%s %d-%s %d, %s\", \n                     format(first_day, \"%B\"),\n                     as.numeric(format(first_day, \"%d\")),\n                     format(last_day, \"%B\"),\n                     as.numeric(format(last_day, \"%d\")),\n                     format(first_day, \"%Y\")))\n    } else {\n      # Same month: \"March 24-30, 2025\"\n      return(sprintf(\"%s %d-%d, %s\", \n                     format(first_day, \"%B\"),\n                     as.numeric(format(first_day, \"%d\")),\n                     as.numeric(format(last_day, \"%d\")),\n                     format(first_day, \"%Y\")))\n    }\n  }\n  \n  # Default fallback\n  return(\"Current Period\")\n}\n\n# Function to safely escape strings for SQL queries\nsql_escape <- function(text) {\n  if (is.null(text) || is.na(text)) {\n    return(\"\")\n  }\n  return(gsub(\"'\", \"''\", as.character(text)))\n}","type":"text"},{"name":"shiny-budget-tracker.Rproj","content":"Version: 1.0\nProjectId: 0fbe9888-d090-4bdb-b9b1-76452e43c4a2\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n","type":"text"},{"name":"www/scripts.js","content":"// Budget Tracker App - JavaScript functions\n\n// Dark mode toggle function\nfunction toggleDarkMode(isDark) {\n  if (isDark) {\n    document.body.classList.add('dark-mode');\n    // Force tab styles\n    setTimeout(function() {\n      $('.nav-tabs .nav-link').css('color', '#48A860');\n      $('.nav-tabs .nav-link.active').css({\n        'background-color': '#48A860',\n        'color': 'white'\n      });\n    }, 100);\n  } else {\n    document.body.classList.remove('dark-mode');\n  }\n}\n\n// Modal control functions\nfunction showEditModal() {\n  var modal = document.getElementById('edit-expense-modal');\n  if (modal) {\n    modal.style.display = 'block';\n  }\n}\n\nfunction hideEditModal() {\n  var modal = document.getElementById('edit-expense-modal');\n  if (modal) {\n    modal.style.display = 'none';\n  }\n}\n\n// Dark mode table styling function\nfunction applyDarkModeToTables() {\n  // Target the expense table specifically with highest priority\n  var expenseTables = document.querySelectorAll(\"#expense_list .table, #expense_list table\");\n  expenseTables.forEach(function(table) {\n    table.style.setProperty(\"background-color\", \"#1e1e1e\", \"important\");\n    \n    // Target all table rows directly\n    var rows = table.querySelectorAll(\"tbody tr\");\n    rows.forEach(function(row, index) {\n      row.style.setProperty(\"background-color\", index % 2 === 0 ? \"#1e1e1e\" : \"#2a2a2a\", \"important\");\n    });\n    \n    // Target all table cells directly\n    var cells = table.querySelectorAll(\"td, th\");\n    cells.forEach(function(cell) {\n      cell.style.setProperty(\"color\", \"#FFFFFF\", \"important\");\n      cell.style.setProperty(\"background-color\", \"inherit\", \"important\");\n    });\n    \n    // Also ensure the table footer has dark background\n    var tfoot = table.querySelector(\"tfoot\");\n    if (tfoot) {\n      tfoot.style.setProperty(\"background-color\", \"#1e1e1e\", \"important\");\n      var tfootRow = tfoot.querySelector(\"tr\");\n      if (tfootRow) {\n        tfootRow.style.setProperty(\"background-color\", \"#1e1e1e\", \"important\");\n      }\n    }\n  });\n}\n\n// Document ready function\n$(document).ready(function() {\n  // Form submission handling\n  $('#login-form').on('submit', function(e) {\n    e.preventDefault();\n    $('#login_btn').click();\n    return false;\n  });\n  \n  // Direct keypress handling with specific target selectors\n  $('#username, #password').on('keydown', function(e) {\n    if (e.which === 13 || e.keyCode === 13) {\n      e.preventDefault();\n      $('#login_btn').click();\n      return false;\n    }\n  });\n  \n  // Additional keyup event for redundancy\n  $('#username, #password').on('keyup', function(e) {\n    if (e.which === 13 || e.keyCode === 13) {\n      // Add a small delay to ensure event is processed after input\n      setTimeout(function() {\n        $('#login_btn').click();\n      }, 50);\n      e.preventDefault();\n      return false;\n    }\n  });\n  \n  // Event delegation approach (works even if elements are dynamically added)\n  $(document).on('keypress', '#username, #password', function(e) {\n    if (e.which === 13 || e.keyCode === 13) {\n      e.preventDefault();\n      $('#login_btn').click();\n      return false;\n    }\n  });\n  \n  // Log to console for debugging\n  console.log('Enhanced login form Enter key handlers initialized');\n});","type":"text"},{"name":"www/styles.css","content":"/* Budget Tracker App Styles */\n\n/* Progress bar styles */\n.progress {\n  background-color: #f5f5f5;\n  border-radius: 4px;\n}\n\nbody.dark-mode .progress {\n  background-color: #333333;\n}\n\n.progress-bar-danger {\n  background-color: #dc3545;\n}\n\n/* Progress bar animation */\n@keyframes progress-bar-stripes {\n  from { background-position: 40px 0; }\n  to { background-position: 0 0; }\n}\n\n.progress-bar.active {\n  animation: progress-bar-stripes 2s linear infinite;\n}\n\nbody { font-family: Arial, sans-serif; }\n.container-fluid { max-width: 1200px; margin: 0 auto; }\n.nav-tabs { margin-bottom: 20px; }\n.card { \n  border: 1px solid #ddd; \n  border-radius: 4px; \n  padding: 15px; \n  margin-bottom: 20px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n.btn-block { width: 100%; }\n.navbar { \n  background-color: #007bff; \n  color: white; \n  padding: 15px; \n  margin-bottom: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.navbar h3 { margin: 0; color: white; }\n.nav-buttons { display: flex; }\n.mr-2 { margin-right: 10px; }\n.welcome-message { margin-bottom: 20px; }\n\n/* Make form inputs consistent width */\n.form-group {\n  max-width: 100%;\n}\n\n/* Responsive adjustments */\n@media (max-width: 576px) {\n  .form-control {\n    width: 100% !important;\n  }\n}\n\n/* Settings page takes full screen */\n#settings-panel {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: white;\n  z-index: 1000;\n  overflow-y: auto;\n}\n\n/* Make settings content consistent width */\n#settings-content {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 15px;\n}\n\n/* Make settings card same width as other cards */\n#settings-content .card {\n  max-width: none;\n  width: 100%;\n}\n\n/* Add padding to settings tabs */\n.p-3 {\n  padding: 15px;\n}\n\n/* Center login and register forms */\n#login-panel, #register-panel {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding-top: 40px;\n}\n\n#login-panel .card, #register-panel .card {\n  width: 100%;\n  max-width: 400px;\n}\n\n/* Make all tabsets consistent in appearance */\n.nav-tabs {\n  width: 100%;\n  display: flex;\n}\n\n.nav-tabs .nav-item {\n  flex: 1;\n  text-align: center;\n}\n\n.nav-tabs .nav-link {\n  width: 100%;\n  border-radius: 0;\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n}\n\n/* Ensure settings tabs match main tabs in appearance */\n#settings_tabs .nav-tabs {\n  margin-bottom: 20px;\n  border-bottom: 1px solid #dee2e6;\n}\n\n#settings_tabs .tab-content {\n  width: 100%;\n}\n\n#settings_tabs .tab-pane {\n  width: 100%;\n}\n\n/* Export options container */\n.export-container {\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 15px;\n  align-items: center;\n}\n\n.export-format-select {\n  margin-right: 10px;\n  min-width: 180px; /* Ensure enough width for dropdown text */\n}\n\n/* Make sure dropdown has enough width */\n.export-format-select .selectize-input,\n.export-format-select .form-control {\n  min-width: 180px;\n  width: 100% !important;\n  padding-right: 25px; /* Make room for dropdown arrow */\n}\n\n/* Danger zone styles */\n.danger-zone {\n  margin-top: 30px;\n  margin-bottom: 20px;\n  padding-top: 20px;\n  border-top: 1px solid #ddd;\n}\n\n.danger-zone h4 {\n  color: #dc3545;\n  margin-bottom: 15px;\n}\n\n/* Dark mode styles */\nbody.dark-mode {\n  background-color: #121212;\n  color: #ffffff;\n}\n\nbody.dark-mode .card {\n  background-color: #1e1e1e;\n  border-color: #333333;\n}\n\nbody.dark-mode .form-control {\n  background-color: #2a2a2a;\n  color: #ffffff;\n  border-color: #333333;\n}\n\n/* Style for dropdown menus in dark mode */\nbody.dark-mode select.form-control,\nbody.dark-mode .selectize-input,\nbody.dark-mode .selectize-dropdown {\n  background-color: #000000 !important;\n  color: #ffffff !important;\n  border-color: #333333 !important;\n}\n\n/* Style dropdown options */\nbody.dark-mode option {\n  background-color: #000000 !important;\n  color: #ffffff !important;\n}\n\n/* Dark mode table styles with higher specificity */\nbody.dark-mode .table,\nbody.dark-mode .table-striped {\n  /* Keep table text black even in dark mode */\n  color: #000000 !important;\n  background-color: #1e1e1e !important;\n}\n\nbody.dark-mode .table tr,\nbody.dark-mode .table-striped tr {\n  background-color: #1e1e1e !important;\n}\n\nbody.dark-mode .table tbody tr,\nbody.dark-mode .table-striped tbody tr {\n  background-color: #1e1e1e !important;\n}\n\nbody.dark-mode .table-striped tbody tr:nth-of-type(odd) {\n  background-color: #2a2a2a !important;\n}\n\nbody.dark-mode .table th,\nbody.dark-mode .table td {\n  color: #000000 !important;\n  border-color: #333333 !important;\n}\n\nbody.dark-mode .navbar {\n  background-color: #48A860 !important;\n}\n\nbody.dark-mode .navbar h3 {\n  color: white !important;\n}\n\nbody.dark-mode #settings-panel {\n  background-color: #121212;\n}\n\nbody.dark-mode .nav-tabs {\n  border-color: #333333;\n}\n\nbody.dark-mode .nav-tabs .nav-link {\n  color: #48A860 !important;\n}\n\nbody.dark-mode .nav-tabs .nav-link.active {\n  background-color: #48A860 !important;\n  color: white !important;\n  border-color: #333333 !important;\n}\n\nbody.dark-mode .btn-secondary {\n  background-color: #ffffff !important;\n  border-color: #ffffff !important;\n  color: #000000 !important;\n}\n\n/* Dark mode for danger zone */\nbody.dark-mode .danger-zone {\n  border-top: 1px solid #333333;\n}\n\n/* Modal styles */\n.modal {\n  display: none;\n  position: fixed;\n  z-index: 2000;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  background-color: rgba(0,0,0,0.4);\n}\n\n.modal-content {\n  background-color: #fefefe;\n  margin: 15% auto;\n  padding: 20px;\n  border: 1px solid #888;\n  width: 80%;\n  max-width: 500px;\n}\n\nbody.dark-mode .modal-content {\n  background-color: #1e1e1e;\n  border-color: #333333;\n  color: #ffffff;\n}\n\n/* Enhance action buttons in expense list */\n.action-btn {\n  padding: 2px 6px;\n  margin: 0 2px;\n}\n\n\n/* Import Data styles */\n.format-instructions {\n  background-color: #f8f9fa;\n  padding: 15px;\n  border-radius: 4px;\n  margin-bottom: 20px;\n}\n\n.format-instructions pre {\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\nbody.dark-mode .format-instructions {\n  background-color: #2a2a2a;\n  color: #ffffff;\n}\n\nbody.dark-mode .format-instructions pre {\n  background-color: #333333;\n  color: #ffffff;\n}\n\n.upload-preview {\n  margin-top: 20px;\n}\n\n/* Text area styling */\n#expense_text_data {\n  font-family: 'Courier New', monospace;\n  font-size: 14px;\n  line-height: 1.5;\n}\n\nbody.dark-mode #expense_text_data {\n  background-color: #2a2a2a;\n  color: #ffffff;\n  border-color: #333333;\n}","type":"text"}]
